
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000144c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000144c  000014e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  0080006e  0080006e  000014ee  2**0
                  ALLOC
  3 .stab         000014c4  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b2  00000000  00000000  000029b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00002a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000027f  00000000  00000000  00002aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000e91  00000000  00000000  00002d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000484  00000000  00000000  00003bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000088b  00000000  00000000  0000403a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000080  00000000  00000000  000048c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000439  00000000  00000000  00004948  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005d0  00000000  00000000  00004d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  00005351  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 12 01 	jmp	0x224	; 0x224 <__ctors_end>
       4:	0c 94 06 04 	jmp	0x80c	; 0x80c <__vector_1>
       8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
       c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      10:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      14:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      18:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      1c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      20:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      24:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      28:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      2c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      30:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      34:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      38:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      3c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      40:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      44:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      48:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      4c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      50:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>

00000054 <usbDescriptorString0>:
      54:	04 03 09 04                                         ....

00000058 <usbDescriptorStringVendor>:
      58:	42 03 53 00 70 00 61 00 63 00 65 00 6d 00 61 00     B.S.p.a.c.e.m.a.
      68:	6e 00 20 00 53 00 70 00 69 00 66 00 66 00 20 00     n. .S.p.i.f.f. .
      78:	68 00 74 00 74 00 70 00 3a 00 2f 00 2f 00 73 00     h.t.t.p.:././.s.
      88:	79 00 6d 00 6c 00 69 00 6e 00 6b 00 2e 00 64 00     y.m.l.i.n.k...d.
      98:	6b 00                                               k.

0000009a <usbDescriptorStringDevice>:
      9a:	2a 03 53 00 70 00 69 00 66 00 66 00 27 00 73 00     *.S.p.i.f.f.'.s.
      aa:	20 00 43 00 36 00 34 00 20 00 4b 00 65 00 79 00      .C.6.4. .K.e.y.
      ba:	62 00 6f 00 61 00 72 00 64 00                       b.o.a.r.d.

000000c4 <usbDescriptorStringSerialNumber>:
      c4:	06 03 34 00 32 00                                   ..4.2.

000000ca <usbDescriptorDevice>:
      ca:	12 01 01 01 00 00 00 08 42 42 ad de 98 01 01 02     ........BB......
      da:	03 01                                               ..

000000dc <usbDescriptorConfiguration>:
      dc:	09 02 22 00 01 01 00 40 32 09 04 00 00 01 03 00     .."....@2.......
      ec:	00 00 09 21 01 01 00 01 22 69 00 07 05 81 03 08     ...!...."i......
      fc:	00 0a                                               ..

000000fe <keymap>:
      fe:	79 20 22 71 73 75 77 1e 28 1a 15 1c 0c 13 7a 29     y "qsuw.(.....z)
     10e:	7d 04 07 0a 0d 0f 84 66 81 21 70 72 74 76 78 6f     }......f.!prtvxo
     11e:	7e 1d 06 05 10 37 6b 2c 7f 16 09 0b 0e 83 7b 68     ~....7k,......{h
     12e:	80 08 17 18 12 85 82 14 7c 67 1b 19 11 36 38 6c     ........|g...68l
     13e:	6a 00 00 00 00 00 00 00                             j.......

00000146 <spec_keys>:
     146:	1f 00 34 00 23 00 24 00 24 00 34 88 25 00 26 00     ..4.#.$.$.4.%.&.
     156:	26 00 27 00 27 00 27 88 2e 02 2e 8a 2d 00 2d 88     &.'.'.'.....-.-.
     166:	35 02 35 8a 4a 80 4d 80 2a 00 4c 88 25 02 25 02     5.5.J.M.*.L.%.%.
     176:	2e 00 2e 88 51 80 52 80 4f 80 50 80 3a 80 3b 80     ....Q.R.O.P.:.;.
     186:	3c 80 3d 80 3e 80 3f 80 40 80 41 80 23 02 23 00     <.=.>.?.@.A.#.#.
     196:	33 02 2f 88 33 00 30 88 1f 8a 1f 8a                 3./.3.0.....

000001a2 <modmask>:
     1a2:	01 02 04 08 10 20 40 80                             ..... @.

000001aa <usbDescriptorHidReport>:
     1aa:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     1ba:	75 01 95 08 81 02 95 01 75 08 81 03 95 05 75 08     u.......u.....u.
     1ca:	15 00 25 65 19 00 29 65 81 00 05 08 25 01 95 05     ..%e..)e....%...
     1da:	75 01 19 01 29 05 91 02 95 01 75 03 91 03 c0 05     u...).....u.....
     1ea:	01 09 04 a1 01 09 01 a1 00 15 ff 25 01 75 02 95     ...........%.u..
     1fa:	02 09 30 09 31 81 02 15 00 05 09 75 01 95 01 09     ..0.1......u....
     20a:	01 81 02 c0 95 03 81 01 c0                          .........

00000213 <decode_joy>:
     213:	0a 06 0e 02 09 05 0d 01 0b 07 0f 03 08 04 0c 00     ................
	...

00000224 <__ctors_end>:
     224:	11 24       	eor	r1, r1
     226:	1f be       	out	0x3f, r1	; 63
     228:	cf e5       	ldi	r28, 0x5F	; 95
     22a:	d4 e0       	ldi	r29, 0x04	; 4
     22c:	de bf       	out	0x3e, r29	; 62
     22e:	cd bf       	out	0x3d, r28	; 61

00000230 <__do_copy_data>:
     230:	10 e0       	ldi	r17, 0x00	; 0
     232:	a0 e6       	ldi	r26, 0x60	; 96
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	ec e4       	ldi	r30, 0x4C	; 76
     238:	f4 e1       	ldi	r31, 0x14	; 20
     23a:	02 c0       	rjmp	.+4      	; 0x240 <.do_copy_data_start>

0000023c <.do_copy_data_loop>:
     23c:	05 90       	lpm	r0, Z+
     23e:	0d 92       	st	X+, r0

00000240 <.do_copy_data_start>:
     240:	ae 36       	cpi	r26, 0x6E	; 110
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <.do_copy_data_loop>

00000246 <__do_clear_bss>:
     246:	10 e0       	ldi	r17, 0x00	; 0
     248:	ae e6       	ldi	r26, 0x6E	; 110
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	af 3a       	cpi	r26, 0xAF	; 175
     252:	b1 07       	cpc	r27, r17
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <main>
     25a:	0c 94 25 0a 	jmp	0x144a	; 0x144a <_exit>

0000025e <__bad_interrupt>:
     25e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000262 <usbInit>:

/* ------------------------------------------------------------------------- */

void    usbInit(void)
{
     262:	85 b7       	in	r24, 0x35	; 53
     264:	83 60       	ori	r24, 0x03	; 3
     266:	85 bf       	out	0x35, r24	; 53
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     268:	8b b7       	in	r24, 0x3b	; 59
     26a:	80 64       	ori	r24, 0x40	; 64
     26c:	8b bf       	out	0x3b, r24	; 59
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    USB_SET_DATATOKEN1(USBPID_DATA0);   /* reset data toggling for interrupt endpoint */
     26e:	83 ec       	ldi	r24, 0xC3	; 195
     270:	80 93 85 00 	sts	0x0085, r24
     274:	08 95       	ret

00000276 <usbPoll>:
     276:	0f 93       	push	r16
     278:	1f 93       	push	r17
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	60 91 95 00 	lds	r22, 0x0095
     282:	16 16       	cp	r1, r22
     284:	0c f0       	brlt	.+2      	; 0x288 <usbPoll+0x12>
     286:	d9 c0       	rjmp	.+434    	; 0x43a <usbPoll+0x1c4>
     288:	63 50       	subi	r22, 0x03	; 3
     28a:	80 91 92 00 	lds	r24, 0x0092
     28e:	c5 ea       	ldi	r28, 0xA5	; 165
     290:	d0 e0       	ldi	r29, 0x00	; 0
     292:	c8 1b       	sub	r28, r24
     294:	d1 09       	sbc	r29, r1
     296:	80 91 91 00 	lds	r24, 0x0091
     29a:	8d 32       	cpi	r24, 0x2D	; 45
     29c:	09 f0       	breq	.+2      	; 0x2a0 <usbPoll+0x2a>
     29e:	b0 c0       	rjmp	.+352    	; 0x400 <usbPoll+0x18a>
     2a0:	8a e5       	ldi	r24, 0x5A	; 90
     2a2:	80 93 61 00 	sts	0x0061, r24
     2a6:	68 30       	cpi	r22, 0x08	; 8
     2a8:	09 f0       	breq	.+2      	; 0x2ac <usbPoll+0x36>
     2aa:	bf c0       	rjmp	.+382    	; 0x42a <usbPoll+0x1b4>
     2ac:	98 81       	ld	r25, Y
     2ae:	89 2f       	mov	r24, r25
     2b0:	80 76       	andi	r24, 0x60	; 96
     2b2:	09 f0       	breq	.+2      	; 0x2b6 <usbPoll+0x40>
     2b4:	91 c0       	rjmp	.+290    	; 0x3d8 <usbPoll+0x162>
     2b6:	23 e8       	ldi	r18, 0x83	; 131
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	10 92 83 00 	sts	0x0083, r1
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	88 23       	and	r24, r24
     2c2:	69 f4       	brne	.+26     	; 0x2de <usbPoll+0x68>
     2c4:	9f 71       	andi	r25, 0x1F	; 31
     2c6:	19 f4       	brne	.+6      	; 0x2ce <usbPoll+0x58>
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	80 93 83 00 	sts	0x0083, r24
     2ce:	10 92 84 00 	sts	0x0084, r1
     2d2:	30 93 94 00 	sts	0x0094, r19
     2d6:	20 93 93 00 	sts	0x0093, r18
     2da:	92 e0       	ldi	r25, 0x02	; 2
     2dc:	88 c0       	rjmp	.+272    	; 0x3ee <usbPoll+0x178>
     2de:	85 30       	cpi	r24, 0x05	; 5
     2e0:	21 f4       	brne	.+8      	; 0x2ea <usbPoll+0x74>
     2e2:	8a 81       	ldd	r24, Y+2	; 0x02
     2e4:	80 93 96 00 	sts	0x0096, r24
     2e8:	fe c0       	rjmp	.+508    	; 0x4e6 <__stack+0x87>
     2ea:	86 30       	cpi	r24, 0x06	; 6
     2ec:	09 f0       	breq	.+2      	; 0x2f0 <usbPoll+0x7a>
     2ee:	56 c0       	rjmp	.+172    	; 0x39c <usbPoll+0x126>
     2f0:	8b 81       	ldd	r24, Y+3	; 0x03
     2f2:	81 30       	cpi	r24, 0x01	; 1
     2f4:	41 f4       	brne	.+16     	; 0x306 <usbPoll+0x90>
     2f6:	8a ec       	ldi	r24, 0xCA	; 202
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	90 93 94 00 	sts	0x0094, r25
     2fe:	80 93 93 00 	sts	0x0093, r24
     302:	92 e1       	ldi	r25, 0x12	; 18
     304:	f3 c0       	rjmp	.+486    	; 0x4ec <__stack+0x8d>
     306:	82 30       	cpi	r24, 0x02	; 2
     308:	41 f4       	brne	.+16     	; 0x31a <usbPoll+0xa4>
     30a:	8c ed       	ldi	r24, 0xDC	; 220
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	90 93 94 00 	sts	0x0094, r25
     312:	80 93 93 00 	sts	0x0093, r24
     316:	92 e2       	ldi	r25, 0x22	; 34
     318:	e9 c0       	rjmp	.+466    	; 0x4ec <__stack+0x8d>
     31a:	83 30       	cpi	r24, 0x03	; 3
     31c:	51 f5       	brne	.+84     	; 0x372 <usbPoll+0xfc>
     31e:	8a 81       	ldd	r24, Y+2	; 0x02
     320:	88 23       	and	r24, r24
     322:	41 f4       	brne	.+16     	; 0x334 <usbPoll+0xbe>
     324:	84 e5       	ldi	r24, 0x54	; 84
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	90 93 94 00 	sts	0x0094, r25
     32c:	80 93 93 00 	sts	0x0093, r24
     330:	94 e0       	ldi	r25, 0x04	; 4
     332:	dc c0       	rjmp	.+440    	; 0x4ec <__stack+0x8d>
     334:	81 30       	cpi	r24, 0x01	; 1
     336:	41 f4       	brne	.+16     	; 0x348 <usbPoll+0xd2>
     338:	88 e5       	ldi	r24, 0x58	; 88
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	90 93 94 00 	sts	0x0094, r25
     340:	80 93 93 00 	sts	0x0093, r24
     344:	92 e4       	ldi	r25, 0x42	; 66
     346:	d2 c0       	rjmp	.+420    	; 0x4ec <__stack+0x8d>
     348:	82 30       	cpi	r24, 0x02	; 2
     34a:	41 f4       	brne	.+16     	; 0x35c <usbPoll+0xe6>
     34c:	8a e9       	ldi	r24, 0x9A	; 154
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	90 93 94 00 	sts	0x0094, r25
     354:	80 93 93 00 	sts	0x0093, r24
     358:	9a e2       	ldi	r25, 0x2A	; 42
     35a:	c8 c0       	rjmp	.+400    	; 0x4ec <__stack+0x8d>
     35c:	83 30       	cpi	r24, 0x03	; 3
     35e:	09 f0       	breq	.+2      	; 0x362 <usbPoll+0xec>
     360:	c4 c0       	rjmp	.+392    	; 0x4ea <__stack+0x8b>
     362:	84 ec       	ldi	r24, 0xC4	; 196
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	90 93 94 00 	sts	0x0094, r25
     36a:	80 93 93 00 	sts	0x0093, r24
     36e:	96 e0       	ldi	r25, 0x06	; 6
     370:	bd c0       	rjmp	.+378    	; 0x4ec <__stack+0x8d>
     372:	81 32       	cpi	r24, 0x21	; 33
     374:	41 f4       	brne	.+16     	; 0x386 <usbPoll+0x110>
     376:	8e ee       	ldi	r24, 0xEE	; 238
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	90 93 94 00 	sts	0x0094, r25
     37e:	80 93 93 00 	sts	0x0093, r24
     382:	99 e0       	ldi	r25, 0x09	; 9
     384:	b3 c0       	rjmp	.+358    	; 0x4ec <__stack+0x8d>
     386:	82 32       	cpi	r24, 0x22	; 34
     388:	09 f0       	breq	.+2      	; 0x38c <usbPoll+0x116>
     38a:	af c0       	rjmp	.+350    	; 0x4ea <__stack+0x8b>
     38c:	8a ea       	ldi	r24, 0xAA	; 170
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	90 93 94 00 	sts	0x0094, r25
     394:	80 93 93 00 	sts	0x0093, r24
     398:	99 e6       	ldi	r25, 0x69	; 105
     39a:	a8 c0       	rjmp	.+336    	; 0x4ec <__stack+0x8d>
     39c:	88 30       	cpi	r24, 0x08	; 8
     39e:	39 f4       	brne	.+14     	; 0x3ae <usbPoll+0x138>
     3a0:	88 e9       	ldi	r24, 0x98	; 152
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	90 93 94 00 	sts	0x0094, r25
     3a8:	80 93 93 00 	sts	0x0093, r24
     3ac:	0c c0       	rjmp	.+24     	; 0x3c6 <usbPoll+0x150>
     3ae:	89 30       	cpi	r24, 0x09	; 9
     3b0:	21 f4       	brne	.+8      	; 0x3ba <usbPoll+0x144>
     3b2:	8a 81       	ldd	r24, Y+2	; 0x02
     3b4:	80 93 98 00 	sts	0x0098, r24
     3b8:	96 c0       	rjmp	.+300    	; 0x4e6 <__stack+0x87>
     3ba:	8a 30       	cpi	r24, 0x0A	; 10
     3bc:	31 f4       	brne	.+12     	; 0x3ca <usbPoll+0x154>
     3be:	30 93 94 00 	sts	0x0094, r19
     3c2:	20 93 93 00 	sts	0x0093, r18
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	12 c0       	rjmp	.+36     	; 0x3ee <usbPoll+0x178>
     3ca:	8b 30       	cpi	r24, 0x0B	; 11
     3cc:	09 f0       	breq	.+2      	; 0x3d0 <usbPoll+0x15a>
     3ce:	8b c0       	rjmp	.+278    	; 0x4e6 <__stack+0x87>
     3d0:	83 ec       	ldi	r24, 0xC3	; 195
     3d2:	80 93 85 00 	sts	0x0085, r24
     3d6:	87 c0       	rjmp	.+270    	; 0x4e6 <__stack+0x87>
     3d8:	ce 01       	movw	r24, r28
     3da:	0e 94 a0 02 	call	0x540	; 0x540 <usbFunctionSetup>
     3de:	98 2f       	mov	r25, r24
     3e0:	8f 3f       	cpi	r24, 0xFF	; 255
     3e2:	29 f4       	brne	.+10     	; 0x3ee <usbPoll+0x178>
     3e4:	88 81       	ld	r24, Y
     3e6:	87 ff       	sbrs	r24, 7
     3e8:	1a c0       	rjmp	.+52     	; 0x41e <usbPoll+0x1a8>
     3ea:	9e 81       	ldd	r25, Y+6	; 0x06
     3ec:	18 c0       	rjmp	.+48     	; 0x41e <usbPoll+0x1a8>
     3ee:	20 e8       	ldi	r18, 0x80	; 128
     3f0:	8f 81       	ldd	r24, Y+7	; 0x07
     3f2:	88 23       	and	r24, r24
     3f4:	e1 f4       	brne	.+56     	; 0x42e <usbPoll+0x1b8>
     3f6:	8e 81       	ldd	r24, Y+6	; 0x06
     3f8:	89 17       	cp	r24, r25
     3fa:	c8 f4       	brcc	.+50     	; 0x42e <usbPoll+0x1b8>
     3fc:	98 2f       	mov	r25, r24
     3fe:	17 c0       	rjmp	.+46     	; 0x42e <usbPoll+0x1b8>
     400:	80 91 6e 00 	lds	r24, 0x006E
     404:	87 fd       	sbrc	r24, 7
     406:	11 c0       	rjmp	.+34     	; 0x42a <usbPoll+0x1b4>
     408:	ce 01       	movw	r24, r28
     40a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <usbFunctionWrite>
     40e:	8f 3f       	cpi	r24, 0xFF	; 255
     410:	41 f4       	brne	.+16     	; 0x422 <usbPoll+0x1ac>
     412:	80 93 60 00 	sts	0x0060, r24
     416:	8e e1       	ldi	r24, 0x1E	; 30
     418:	80 93 61 00 	sts	0x0061, r24
     41c:	9f ef       	ldi	r25, 0xFF	; 255
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	06 c0       	rjmp	.+12     	; 0x42e <usbPoll+0x1b8>
     422:	88 23       	and	r24, r24
     424:	d9 f3       	breq	.-10     	; 0x41c <usbPoll+0x1a6>
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	fa cf       	rjmp	.-12     	; 0x41e <usbPoll+0x1a8>
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	20 e8       	ldi	r18, 0x80	; 128
     42e:	20 93 6e 00 	sts	0x006E, r18
     432:	90 93 60 00 	sts	0x0060, r25
     436:	10 92 95 00 	sts	0x0095, r1
     43a:	80 91 61 00 	lds	r24, 0x0061
     43e:	84 ff       	sbrs	r24, 4
     440:	47 c0       	rjmp	.+142    	; 0x4d0 <__stack+0x71>
     442:	80 91 60 00 	lds	r24, 0x0060
     446:	8f 3f       	cpi	r24, 0xFF	; 255
     448:	09 f4       	brne	.+2      	; 0x44c <usbPoll+0x1d6>
     44a:	42 c0       	rjmp	.+132    	; 0x4d0 <__stack+0x71>
     44c:	68 2f       	mov	r22, r24
     44e:	89 30       	cpi	r24, 0x09	; 9
     450:	08 f0       	brcs	.+2      	; 0x454 <usbPoll+0x1de>
     452:	68 e0       	ldi	r22, 0x08	; 8
     454:	86 1b       	sub	r24, r22
     456:	80 93 60 00 	sts	0x0060, r24
     45a:	80 91 6e 00 	lds	r24, 0x006E
     45e:	80 ff       	sbrs	r24, 0
     460:	02 c0       	rjmp	.+4      	; 0x466 <__stack+0x7>
     462:	03 ec       	ldi	r16, 0xC3	; 195
     464:	01 c0       	rjmp	.+2      	; 0x468 <__stack+0x9>
     466:	0b e4       	ldi	r16, 0x4B	; 75
     468:	8f 5f       	subi	r24, 0xFF	; 255
     46a:	80 93 6e 00 	sts	0x006E, r24
     46e:	20 91 93 00 	lds	r18, 0x0093
     472:	30 91 94 00 	lds	r19, 0x0094
     476:	86 fd       	sbrc	r24, 6
     478:	05 c0       	rjmp	.+10     	; 0x484 <__stack+0x25>
     47a:	96 2f       	mov	r25, r22
     47c:	f9 01       	movw	r30, r18
     47e:	ab e7       	ldi	r26, 0x7B	; 123
     480:	b0 e0       	ldi	r27, 0x00	; 0
     482:	0d c0       	rjmp	.+26     	; 0x49e <__stack+0x3f>
     484:	96 2f       	mov	r25, r22
     486:	f9 01       	movw	r30, r18
     488:	ab e7       	ldi	r26, 0x7B	; 123
     48a:	b0 e0       	ldi	r27, 0x00	; 0
     48c:	03 c0       	rjmp	.+6      	; 0x494 <__stack+0x35>
     48e:	84 91       	lpm	r24, Z
     490:	8d 93       	st	X+, r24
     492:	31 96       	adiw	r30, 0x01	; 1
     494:	91 50       	subi	r25, 0x01	; 1
     496:	d8 f7       	brcc	.-10     	; 0x48e <__stack+0x2f>
     498:	04 c0       	rjmp	.+8      	; 0x4a2 <__stack+0x43>
     49a:	81 91       	ld	r24, Z+
     49c:	8d 93       	st	X+, r24
     49e:	91 50       	subi	r25, 0x01	; 1
     4a0:	e0 f7       	brcc	.-8      	; 0x49a <__stack+0x3b>
     4a2:	c9 01       	movw	r24, r18
     4a4:	86 0f       	add	r24, r22
     4a6:	91 1d       	adc	r25, r1
     4a8:	90 93 94 00 	sts	0x0094, r25
     4ac:	80 93 93 00 	sts	0x0093, r24
     4b0:	77 27       	eor	r23, r23
     4b2:	16 2f       	mov	r17, r22
     4b4:	8b e7       	ldi	r24, 0x7B	; 123
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 82 05 	call	0xb04	; 0xb04 <usbCrc16Append>
     4bc:	18 30       	cpi	r17, 0x08	; 8
     4be:	18 f4       	brcc	.+6      	; 0x4c6 <__stack+0x67>
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
     4c2:	80 93 60 00 	sts	0x0060, r24
     4c6:	00 93 7a 00 	sts	0x007A, r16
     4ca:	1c 5f       	subi	r17, 0xFC	; 252
     4cc:	10 93 61 00 	sts	0x0061, r17
     4d0:	9a e0       	ldi	r25, 0x0A	; 10
     4d2:	80 b3       	in	r24, 0x10	; 16
     4d4:	85 70       	andi	r24, 0x05	; 5
     4d6:	61 f4       	brne	.+24     	; 0x4f0 <__stack+0x91>
     4d8:	91 50       	subi	r25, 0x01	; 1
     4da:	d9 f7       	brne	.-10     	; 0x4d2 <__stack+0x73>
     4dc:	10 92 96 00 	sts	0x0096, r1
     4e0:	10 92 90 00 	sts	0x0090, r1
     4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <__stack+0x91>
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	82 cf       	rjmp	.-252    	; 0x3ee <usbPoll+0x178>
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	20 ec       	ldi	r18, 0xC0	; 192
     4ee:	80 cf       	rjmp	.-256    	; 0x3f0 <usbPoll+0x17a>
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	08 95       	ret

000004fa <usbSetInterrupt>:
     4fa:	1f 93       	push	r17
     4fc:	dc 01       	movw	r26, r24
     4fe:	16 2f       	mov	r17, r22
     500:	80 91 62 00 	lds	r24, 0x0062
     504:	84 ff       	sbrs	r24, 4
     506:	07 c0       	rjmp	.+14     	; 0x516 <usbSetInterrupt+0x1c>
     508:	80 91 85 00 	lds	r24, 0x0085
     50c:	98 e8       	ldi	r25, 0x88	; 136
     50e:	89 27       	eor	r24, r25
     510:	80 93 85 00 	sts	0x0085, r24
     514:	03 c0       	rjmp	.+6      	; 0x51c <usbSetInterrupt+0x22>
     516:	8a e5       	ldi	r24, 0x5A	; 90
     518:	80 93 62 00 	sts	0x0062, r24
     51c:	91 2f       	mov	r25, r17
     51e:	e6 e8       	ldi	r30, 0x86	; 134
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	02 c0       	rjmp	.+4      	; 0x528 <usbSetInterrupt+0x2e>
     524:	8d 91       	ld	r24, X+
     526:	81 93       	st	Z+, r24
     528:	91 50       	subi	r25, 0x01	; 1
     52a:	e0 f7       	brcc	.-8      	; 0x524 <usbSetInterrupt+0x2a>
     52c:	61 2f       	mov	r22, r17
     52e:	86 e8       	ldi	r24, 0x86	; 134
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 82 05 	call	0xb04	; 0xb04 <usbCrc16Append>
     536:	1c 5f       	subi	r17, 0xFC	; 252
     538:	10 93 62 00 	sts	0x0062, r17
     53c:	1f 91       	pop	r17
     53e:	08 95       	ret

00000540 <usbFunctionSetup>:

uchar expectReport=0;
uchar LEDstate=0;

uchar	usbFunctionSetup(uchar data[8]) {
     540:	fc 01       	movw	r30, r24
  usbRequest_t *rq = (void *)data;
  usbMsgPtr = reportBuffer;
     542:	81 e7       	ldi	r24, 0x71	; 113
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	90 93 94 00 	sts	0x0094, r25
     54a:	80 93 93 00 	sts	0x0093, r24
  if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
     54e:	80 81       	ld	r24, Z
     550:	80 76       	andi	r24, 0x60	; 96
     552:	80 32       	cpi	r24, 0x20	; 32
     554:	91 f5       	brne	.+100    	; 0x5ba <usbFunctionSetup+0x7a>
    if(rq->bRequest == USBRQ_HID_GET_REPORT){  
     556:	81 81       	ldd	r24, Z+1	; 0x01
     558:	81 30       	cpi	r24, 0x01	; 1
     55a:	19 f4       	brne	.+6      	; 0x562 <usbFunctionSetup+0x22>
     55c:	88 e0       	ldi	r24, 0x08	; 8
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	08 95       	ret
		  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
      /* we only have one report type, so don't look at wValue */
      return sizeof(reportBuffer);
		}else if(rq->bRequest == USBRQ_HID_SET_REPORT){
     562:	89 30       	cpi	r24, 0x09	; 9
     564:	51 f4       	brne	.+20     	; 0x57a <usbFunctionSetup+0x3a>
			if (rq->wLength.word == 1) { /* We expect one byte reports */
     566:	86 81       	ldd	r24, Z+6	; 0x06
     568:	97 81       	ldd	r25, Z+7	; 0x07
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	31 f5       	brne	.+76     	; 0x5ba <usbFunctionSetup+0x7a>
				expectReport=1;
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 6f 00 	sts	0x006F, r24
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	08 95       	ret
				return 0xFF; /* Call usbFunctionWrite with data */
			}  
    }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
     57a:	82 30       	cpi	r24, 0x02	; 2
     57c:	19 f4       	brne	.+6      	; 0x584 <usbFunctionSetup+0x44>
      usbMsgPtr = &idleRate;
     57e:	89 e7       	ldi	r24, 0x79	; 121
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	14 c0       	rjmp	.+40     	; 0x5ac <usbFunctionSetup+0x6c>
      return 1;
    }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
     584:	8a 30       	cpi	r24, 0x0A	; 10
     586:	21 f4       	brne	.+8      	; 0x590 <usbFunctionSetup+0x50>
      idleRate = rq->wValue.bytes[1];
     588:	83 81       	ldd	r24, Z+3	; 0x03
     58a:	80 93 79 00 	sts	0x0079, r24
     58e:	07 c0       	rjmp	.+14     	; 0x59e <usbFunctionSetup+0x5e>
    }else if(rq->bRequest == USBRQ_HID_GET_PROTOCOL) {
     590:	83 30       	cpi	r24, 0x03	; 3
     592:	41 f4       	brne	.+16     	; 0x5a4 <usbFunctionSetup+0x64>
			if (rq->wValue.bytes[1] < 1) {
     594:	83 81       	ldd	r24, Z+3	; 0x03
     596:	88 23       	and	r24, r24
     598:	81 f4       	brne	.+32     	; 0x5ba <usbFunctionSetup+0x7a>
				protocolVer = rq->wValue.bytes[1];
     59a:	10 92 6d 00 	sts	0x006D, r1
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	08 95       	ret
			}
		}else if(rq->bRequest == USBRQ_HID_SET_PROTOCOL) {
     5a4:	8b 30       	cpi	r24, 0x0B	; 11
     5a6:	49 f4       	brne	.+18     	; 0x5ba <usbFunctionSetup+0x7a>
			usbMsgPtr = &protocolVer;
     5a8:	8d e6       	ldi	r24, 0x6D	; 109
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	90 93 94 00 	sts	0x0094, r25
     5b0:	80 93 93 00 	sts	0x0093, r24
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	08 95       	ret
			return 1;
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
		}
  }
	return 0;
}
     5be:	08 95       	ret

000005c0 <usbFunctionWrite>:

uchar usbFunctionWrite(uchar *data, uchar len) {
     5c0:	fc 01       	movw	r30, r24
  if ((expectReport)&&(len==1)) {
     5c2:	80 91 6f 00 	lds	r24, 0x006F
     5c6:	88 23       	and	r24, r24
     5c8:	51 f0       	breq	.+20     	; 0x5de <usbFunctionWrite+0x1e>
     5ca:	61 30       	cpi	r22, 0x01	; 1
     5cc:	41 f4       	brne	.+16     	; 0x5de <usbFunctionWrite+0x1e>
		LEDstate=data[0]; /* Get the state of all 5 LEDs */
     5ce:	80 81       	ld	r24, Z
     5d0:	80 93 70 00 	sts	0x0070, r24
		if (LEDstate&LED_CAPS) { /* Check state of CAPS lock LED */
     5d4:	81 ff       	sbrs	r24, 1
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <usbFunctionWrite+0x1c>
		  PORTD|=0x02;
     5d8:	91 9a       	sbi	0x12, 1	; 18
     5da:	01 c0       	rjmp	.+2      	; 0x5de <usbFunctionWrite+0x1e>
		} else {
			PORTD&=~0x02;
     5dc:	91 98       	cbi	0x12, 1	; 18
		}
		expectReport=0;
		return 1;
	}
	expectReport=0;
     5de:	10 92 6f 00 	sts	0x006F, r1
	return 0x01;
}
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	08 95       	ret

000005e8 <main>:

int	main(void) {
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	22 97       	sbiw	r28, 0x02	; 2
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	0f be       	out	0x3f, r0	; 63
     602:	cd bf       	out	0x3d, r28	; 61
  uchar   updateNeeded = 0;
  uchar   idleCounter = 0;

	wdt_enable(WDTO_2S); /* Enable watchdog timer 2s */
     604:	88 e1       	ldi	r24, 0x18	; 24
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	2f e0       	ldi	r18, 0x0F	; 15
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	a8 95       	wdr
     610:	81 bd       	out	0x21, r24	; 33
     612:	0f be       	out	0x3f, r0	; 63
     614:	21 bd       	out	0x21, r18	; 33
     616:	8f ef       	ldi	r24, 0xFF	; 255
     618:	8b bb       	out	0x1b, r24	; 27
     61a:	1a ba       	out	0x1a, r1	; 26
     61c:	88 bb       	out	0x18, r24	; 24
     61e:	17 ba       	out	0x17, r1	; 23
     620:	85 bb       	out	0x15, r24	; 21
     622:	14 ba       	out	0x14, r1	; 20
     624:	8a ef       	ldi	r24, 0xFA	; 250
     626:	82 bb       	out	0x12, r24	; 18
     628:	87 e0       	ldi	r24, 0x07	; 7
     62a:	81 bb       	out	0x11, r24	; 17
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     62c:	8c e2       	ldi	r24, 0x2C	; 44
     62e:	8a 95       	dec	r24
     630:	f1 f7       	brne	.-4      	; 0x62e <main+0x46>
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	81 bb       	out	0x11, r24	; 17
     636:	85 e0       	ldi	r24, 0x05	; 5
     638:	83 bf       	out	0x33, r24	; 51
  hardwareInit(); /* Initialize hardware (I/O) */
	
	odDebugInit();

	usbInit(); /* Initialize USB stack processing */
     63a:	0e 94 31 01 	call	0x262	; 0x262 <usbInit>
	sei(); /* Enable global interrupts */
     63e:	78 94       	sei
	
	for(;;){	/* Main loop */
		wdt_reset(); /* Reset the watchdog */
     640:	a8 95       	wdr
		usbPoll(); /* Poll the USB stack */
     642:	0e 94 3b 01 	call	0x276	; 0x276 <usbPoll>
     646:	89 b3       	in	r24, 0x19	; 25
     648:	e8 2f       	mov	r30, r24
     64a:	ff 27       	eor	r31, r31
     64c:	ef 70       	andi	r30, 0x0F	; 15
     64e:	f0 70       	andi	r31, 0x00	; 0
     650:	ed 5e       	subi	r30, 0xED	; 237
     652:	fd 4f       	sbci	r31, 0xFD	; 253
     654:	e4 91       	lpm	r30, Z
     656:	80 95       	com	r24
     658:	80 71       	andi	r24, 0x10	; 16
     65a:	e8 2b       	or	r30, r24
     65c:	e0 93 78 00 	sts	0x0078, r30
     660:	40 91 6c 00 	lds	r20, 0x006C
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	a3 e6       	ldi	r26, 0x63	; 99
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	6f ef       	ldi	r22, 0xFF	; 255
     66e:	58 e7       	ldi	r21, 0x78	; 120
     670:	e2 ea       	ldi	r30, 0xA2	; 162
     672:	f1 e0       	ldi	r31, 0x01	; 1
     674:	28 30       	cpi	r18, 0x08	; 8
     676:	38 f4       	brcc	.+14     	; 0x686 <main+0x9e>
     678:	8f 98       	cbi	0x11, 7	; 17
     67a:	97 9a       	sbi	0x12, 7	; 18
     67c:	84 91       	lpm	r24, Z
     67e:	87 bb       	out	0x17, r24	; 23
     680:	80 95       	com	r24
     682:	88 bb       	out	0x18, r24	; 24
     684:	04 c0       	rjmp	.+8      	; 0x68e <main+0xa6>
     686:	17 ba       	out	0x17, r1	; 23
     688:	68 bb       	out	0x18, r22	; 24
     68a:	8f 9a       	sbi	0x11, 7	; 17
     68c:	97 98       	cbi	0x12, 7	; 18
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     68e:	85 2f       	mov	r24, r21
     690:	8a 95       	dec	r24
     692:	f1 f7       	brne	.-4      	; 0x690 <main+0xa8>
     694:	93 b3       	in	r25, 0x13	; 19
     696:	8c 91       	ld	r24, X
     698:	98 13       	cpse	r25, r24
     69a:	4a e0       	ldi	r20, 0x0A	; 10
     69c:	9d 93       	st	X+, r25
     69e:	2f 5f       	subi	r18, 0xFF	; 255
     6a0:	3f 4f       	sbci	r19, 0xFF	; 255
     6a2:	31 96       	adiw	r30, 0x01	; 1
     6a4:	29 30       	cpi	r18, 0x09	; 9
     6a6:	31 05       	cpc	r19, r1
     6a8:	29 f7       	brne	.-54     	; 0x674 <main+0x8c>
     6aa:	40 93 6c 00 	sts	0x006C, r20
     6ae:	41 30       	cpi	r20, 0x01	; 1
     6b0:	09 f0       	breq	.+2      	; 0x6b4 <main+0xcc>
     6b2:	96 c0       	rjmp	.+300    	; 0x7e0 <main+0x1f8>
     6b4:	88 e0       	ldi	r24, 0x08	; 8
     6b6:	e1 e7       	ldi	r30, 0x71	; 113
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	11 92       	st	Z+, r1
     6bc:	8a 95       	dec	r24
     6be:	e9 f7       	brne	.-6      	; 0x6ba <main+0xd2>
     6c0:	80 91 67 00 	lds	r24, 0x0067
     6c4:	48 2f       	mov	r20, r24
     6c6:	55 27       	eor	r21, r21
     6c8:	40 74       	andi	r20, 0x40	; 64
     6ca:	50 70       	andi	r21, 0x00	; 0
     6cc:	80 91 6a 00 	lds	r24, 0x006A
     6d0:	28 2f       	mov	r18, r24
     6d2:	33 27       	eor	r19, r19
     6d4:	22 70       	andi	r18, 0x02	; 2
     6d6:	30 70       	andi	r19, 0x00	; 0
     6d8:	11 e0       	ldi	r17, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	a3 e6       	ldi	r26, 0x63	; 99
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	0c 91       	ld	r16, X
     6e6:	0f 3f       	cpi	r16, 0xFF	; 255
     6e8:	09 f4       	brne	.+2      	; 0x6ec <main+0x104>
     6ea:	5f c0       	rjmp	.+190    	; 0x7aa <main+0x1c2>
     6ec:	1a 82       	std	Y+2, r1	; 0x02
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	57 c0       	rjmp	.+174    	; 0x7a0 <main+0x1b8>
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	80 23       	and	r24, r16
     6f6:	09 f0       	breq	.+2      	; 0x6fa <main+0x112>
     6f8:	4e c0       	rjmp	.+156    	; 0x796 <main+0x1ae>
     6fa:	8a 81       	ldd	r24, Y+2	; 0x02
     6fc:	fb 01       	movw	r30, r22
     6fe:	e8 0f       	add	r30, r24
     700:	f1 1d       	adc	r31, r1
     702:	e2 50       	subi	r30, 0x02	; 2
     704:	ff 4f       	sbci	r31, 0xFF	; 255
     706:	84 91       	lpm	r24, Z
     708:	8f 36       	cpi	r24, 0x6F	; 111
     70a:	70 f1       	brcs	.+92     	; 0x768 <main+0x180>
     70c:	e8 2f       	mov	r30, r24
     70e:	ef 56       	subi	r30, 0x6F	; 111
     710:	41 15       	cp	r20, r1
     712:	51 05       	cpc	r21, r1
     714:	b9 f0       	breq	.+46     	; 0x744 <main+0x15c>
     716:	21 15       	cp	r18, r1
     718:	31 05       	cpc	r19, r1
     71a:	11 f4       	brne	.+4      	; 0x720 <main+0x138>
     71c:	8c 37       	cpi	r24, 0x7C	; 124
     71e:	90 f0       	brcs	.+36     	; 0x744 <main+0x15c>
     720:	ee 2e       	mov	r14, r30
     722:	ff 24       	eor	r15, r15
     724:	ee 0c       	add	r14, r14
     726:	ff 1c       	adc	r15, r15
     728:	ee 0c       	add	r14, r14
     72a:	ff 1c       	adc	r15, r15
     72c:	c7 01       	movw	r24, r14
     72e:	8a 5b       	subi	r24, 0xBA	; 186
     730:	9e 4f       	sbci	r25, 0xFE	; 254
     732:	fc 01       	movw	r30, r24
     734:	84 91       	lpm	r24, Z
     736:	e7 e4       	ldi	r30, 0x47	; 71
     738:	f1 e0       	ldi	r31, 0x01	; 1
     73a:	ee 0e       	add	r14, r30
     73c:	ff 1e       	adc	r15, r31
     73e:	f7 01       	movw	r30, r14
     740:	94 91       	lpm	r25, Z
     742:	1f c0       	rjmp	.+62     	; 0x782 <main+0x19a>
     744:	ee 2e       	mov	r14, r30
     746:	ff 24       	eor	r15, r15
     748:	ee 0c       	add	r14, r14
     74a:	ff 1c       	adc	r15, r15
     74c:	ee 0c       	add	r14, r14
     74e:	ff 1c       	adc	r15, r15
     750:	c7 01       	movw	r24, r14
     752:	88 5b       	subi	r24, 0xB8	; 184
     754:	9e 4f       	sbci	r25, 0xFE	; 254
     756:	fc 01       	movw	r30, r24
     758:	84 91       	lpm	r24, Z
     75a:	e9 e4       	ldi	r30, 0x49	; 73
     75c:	f1 e0       	ldi	r31, 0x01	; 1
     75e:	ee 0e       	add	r14, r30
     760:	ff 1e       	adc	r15, r31
     762:	f7 01       	movw	r30, r14
     764:	94 91       	lpm	r25, Z
     766:	0d c0       	rjmp	.+26     	; 0x782 <main+0x19a>
     768:	86 36       	cpi	r24, 0x66	; 102
     76a:	58 f0       	brcs	.+22     	; 0x782 <main+0x19a>
     76c:	e8 2f       	mov	r30, r24
     76e:	ff 27       	eor	r31, r31
     770:	e4 5c       	subi	r30, 0xC4	; 196
     772:	fe 4f       	sbci	r31, 0xFE	; 254
     774:	e4 91       	lpm	r30, Z
     776:	80 91 71 00 	lds	r24, 0x0071
     77a:	8e 2b       	or	r24, r30
     77c:	80 93 71 00 	sts	0x0071, r24
     780:	0a c0       	rjmp	.+20     	; 0x796 <main+0x1ae>
     782:	88 23       	and	r24, r24
     784:	41 f0       	breq	.+16     	; 0x796 <main+0x1ae>
     786:	1f 5f       	subi	r17, 0xFF	; 255
     788:	18 30       	cpi	r17, 0x08	; 8
     78a:	28 f4       	brcc	.+10     	; 0x796 <main+0x1ae>
     78c:	e1 2f       	mov	r30, r17
     78e:	ff 27       	eor	r31, r31
     790:	ef 58       	subi	r30, 0x8F	; 143
     792:	ff 4f       	sbci	r31, 0xFF	; 255
     794:	80 83       	st	Z, r24
     796:	8a 81       	ldd	r24, Y+2	; 0x02
     798:	8f 5f       	subi	r24, 0xFF	; 255
     79a:	8a 83       	std	Y+2, r24	; 0x02
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	88 0f       	add	r24, r24
     7a0:	89 83       	std	Y+1, r24	; 0x01
     7a2:	8a 81       	ldd	r24, Y+2	; 0x02
     7a4:	88 30       	cpi	r24, 0x08	; 8
     7a6:	08 f4       	brcc	.+2      	; 0x7aa <main+0x1c2>
     7a8:	a4 cf       	rjmp	.-184    	; 0x6f2 <main+0x10a>
     7aa:	11 96       	adiw	r26, 0x01	; 1
     7ac:	68 5f       	subi	r22, 0xF8	; 248
     7ae:	7f 4f       	sbci	r23, 0xFF	; 255
     7b0:	68 34       	cpi	r22, 0x48	; 72
     7b2:	71 05       	cpc	r23, r1
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <main+0x1d0>
     7b6:	96 cf       	rjmp	.-212    	; 0x6e4 <main+0xfc>
     7b8:	97 ff       	sbrs	r25, 7
     7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <main+0x1de>
     7bc:	80 91 71 00 	lds	r24, 0x0071
     7c0:	8f 7d       	andi	r24, 0xDF	; 223
     7c2:	80 93 71 00 	sts	0x0071, r24
     7c6:	93 ff       	sbrs	r25, 3
     7c8:	05 c0       	rjmp	.+10     	; 0x7d4 <main+0x1ec>
     7ca:	80 91 71 00 	lds	r24, 0x0071
     7ce:	8d 7f       	andi	r24, 0xFD	; 253
     7d0:	80 93 71 00 	sts	0x0071, r24
     7d4:	97 77       	andi	r25, 0x77	; 119
     7d6:	80 91 71 00 	lds	r24, 0x0071
     7da:	89 2b       	or	r24, r25
     7dc:	80 93 71 00 	sts	0x0071, r24
     7e0:	80 91 6c 00 	lds	r24, 0x006C
     7e4:	88 23       	and	r24, r24
     7e6:	19 f0       	breq	.+6      	; 0x7ee <main+0x206>
     7e8:	81 50       	subi	r24, 0x01	; 1
     7ea:	80 93 6c 00 	sts	0x006C, r24

    updateNeeded|=scankeys(); /* Scan the keyboard for changes */
		
		/* Check timer if we need periodic reports */
    if(TIFR & (1<<TOV0)){
     7ee:	08 b6       	in	r0, 0x38	; 56
     7f0:	00 fe       	sbrs	r0, 0
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <main+0x210>
      TIFR = 1<<TOV0; /* Reset flag */
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	88 bf       	out	0x38, r24	; 56
      if(idleRate != 0){ /* Do we need periodic reports? */
        if(idleCounter > 4){ /* Yes, but not yet */
          idleCounter -= 5;   /* 22 ms in units of 4 ms */
        }else{ /* Yes, it is time now */
          updateNeeded = 1;
          idleCounter = idleRate;
        }
      }
    }
		
		/* If an update is needed, send the report */
    if(updateNeeded && usbInterruptIsReady()){
     7f8:	80 91 62 00 	lds	r24, 0x0062
     7fc:	84 ff       	sbrs	r24, 4
     7fe:	20 cf       	rjmp	.-448    	; 0x640 <main+0x58>
			updateNeeded = 0;
			usbSetInterrupt(reportBuffer, 2); //sizeof(reportBuffer));
     800:	62 e0       	ldi	r22, 0x02	; 2
     802:	81 e7       	ldi	r24, 0x71	; 113
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 7d 02 	call	0x4fa	; 0x4fa <usbSetInterrupt>
     80a:	1a cf       	rjmp	.-460    	; 0x640 <main+0x58>

0000080c <__vector_1>:
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
SIG_INTERRUPT0:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
     80c:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
     80e:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
     810:	cf 93       	push	r28

00000812 <waitForJ>:
;----------------------------------------------------------------------------
; Synchronize with sync pattern:
;----------------------------------------------------------------------------
;sync byte (D-) pattern LSb to MSb: 01010100 [1 = idle = J, 0 = K]
;sync up with J to K edge during sync pattern -- use fastest possible loops
;first part has no timeout because it waits for IDLE or SE1 (== disconnected)
waitForJ:
    sbis    USBIN, USBMINUS ;1 [40] wait for D- == 1
     812:	80 9b       	sbis	0x10, 0	; 16
    rjmp    waitForJ        ;2
     814:	fe cf       	rjmp	.-4      	; 0x812 <waitForJ>

00000816 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
     816:	80 9b       	sbis	0x10, 0	; 16
    rjmp    foundK
     818:	09 c0       	rjmp	.+18     	; 0x82c <foundK>
    sbis    USBIN, USBMINUS
     81a:	80 9b       	sbis	0x10, 0	; 16
    rjmp    foundK
     81c:	07 c0       	rjmp	.+14     	; 0x82c <foundK>
    sbis    USBIN, USBMINUS
     81e:	80 9b       	sbis	0x10, 0	; 16
    rjmp    foundK
     820:	05 c0       	rjmp	.+10     	; 0x82c <foundK>
    sbis    USBIN, USBMINUS
     822:	80 9b       	sbis	0x10, 0	; 16
    rjmp    foundK
     824:	03 c0       	rjmp	.+6      	; 0x82c <foundK>
    sbis    USBIN, USBMINUS
     826:	80 9b       	sbis	0x10, 0	; 16
    rjmp    foundK
     828:	01 c0       	rjmp	.+2      	; 0x82c <foundK>
    rjmp    sofError
     82a:	9e c0       	rjmp	.+316    	; 0x968 <sofError>

0000082c <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
     82c:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
     82e:	c0 91 92 00 	lds	r28, 0x0092
    clr     YH                  ;1 [5]
     832:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
     834:	c7 56       	subi	r28, 0x67	; 103
    sbci    YH, hi8(-(usbRxBuf));1 [7]
     836:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
     838:	80 9b       	sbis	0x10, 0	; 16
    rjmp    haveTwoBitsK    ;2 [10]
     83a:	02 c0       	rjmp	.+4      	; 0x840 <haveTwoBitsK>
    pop     YH              ; undo the push from before
     83c:	df 91       	pop	r29
    rjmp    waitForK        ; this was not the end of sync, retry
     83e:	eb cf       	rjmp	.-42     	; 0x816 <waitForK>

00000840 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
     840:	2f 93       	push	r18
    push    x1              ;2 [12]
     842:	0f 93       	push	r16
    push    x2              ;2 [14]
     844:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
     846:	00 b3       	in	r16, 0x10	; 16
    ldi     shift, 0xff     ;1 [18]
     848:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
     84a:	00 fb       	bst	r16, 0
    bld     shift, 0        ;1 [20]
     84c:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
     84e:	4f 93       	push	r20
    push    cnt             ;2 [24]
     850:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
     852:	10 b3       	in	r17, 0x10	; 16
    ser     x3              ;1 [26] [inserted init instruction]
     854:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
     856:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
     858:	00 fb       	bst	r16, 0
    bld     shift, 1        ;1 [29]
     85a:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
     85c:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
     85e:	31 c0       	rjmp	.+98     	; 0x8c2 <rxbit2>

00000860 <unstuff0>:

;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
     860:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
     862:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
     864:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x01 ;1 [18]
     866:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
     868:	28 c0       	rjmp	.+80     	; 0x8ba <didUnstuff0>

0000086a <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
     86a:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
     86c:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
     86e:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
     870:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
     872:	00 b3       	in	r16, 0x10	; 16
    rjmp    didUnstuff1 ;2 [27]
     874:	29 c0       	rjmp	.+82     	; 0x8c8 <didUnstuff1>

00000876 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
     876:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
     878:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
     87a:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
     87c:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
     87e:	10 b3       	in	r17, 0x10	; 16
    rjmp    didUnstuff2 ;2 [35]
     880:	2b c0       	rjmp	.+86     	; 0x8d8 <didUnstuff2>

00000882 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
     882:	10 b3       	in	r17, 0x10	; 16
    andi    x3, ~0x08   ;1 [35]
     884:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
     886:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
     888:	2a c0       	rjmp	.+84     	; 0x8de <didUnstuff3>

0000088a <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
     88a:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
     88c:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x10 ;1 [42]
     88e:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
     890:	2c c0       	rjmp	.+88     	; 0x8ea <didUnstuff4>

00000892 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
     892:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
     894:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x20 ;1 [50]
     896:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
     898:	2f c0       	rjmp	.+94     	; 0x8f8 <didUnstuff5>

0000089a <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
     89a:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
     89c:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x40 ;1 [58]
     89e:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
     8a0:	32 c0       	rjmp	.+100    	; 0x906 <didUnstuff6>

000008a2 <rxLoop>:

; extra jobs done during bit interval:
; bit 0:    store, clear [SE0 is unreliable here due to bit dribbling in hubs]
; bit 1:    se0 check
; bit 2:    overflow check
; bit 3:    recovery from delay [bit 0 tasks took too long]
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
     8a2:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
     8a4:	00 b3       	in	r16, 0x10	; 16
    st      y+, x3      ;2 [3] store data
     8a6:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
     8a8:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
     8aa:	00 00       	nop
    eor     x2, x1      ;1 [6]
     8ac:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
     8ae:	10 fb       	bst	r17, 0
    bld     shift, 0    ;1 [8]
     8b0:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
     8b2:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;1 [10]
     8b4:	15 70       	andi	r17, 0x05	; 5
    breq    se0         ;1 [11] SE0 check for bit 1
     8b6:	a9 f1       	breq	.+106    	; 0x922 <se0>
    andi    shift, 0xf9 ;1 [12]
     8b8:	29 7f       	andi	r18, 0xF9	; 249

000008ba <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
     8ba:	91 f2       	breq	.-92     	; 0x860 <unstuff0>
    eor     x1, x2      ;1 [14]
     8bc:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
     8be:	00 fb       	bst	r16, 0
    bld     shift, 1    ;1 [16]
     8c0:	21 f9       	bld	r18, 1

000008c2 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
     8c2:	00 b3       	in	r16, 0x10	; 16
    andi    shift, 0xf3 ;1 [18]
     8c4:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
     8c6:	89 f2       	breq	.-94     	; 0x86a <unstuff1>

000008c8 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
     8c8:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
     8ca:	f0 f1       	brcs	.+124    	; 0x948 <overflow>
    eor     x2, x1      ;1 [22]
     8cc:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
     8ce:	10 fb       	bst	r17, 0
    bld     shift, 2    ;1 [24]
     8d0:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
     8d2:	10 b3       	in	r17, 0x10	; 16
    andi    shift, 0xe7 ;1 [26]
     8d4:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
     8d6:	79 f2       	breq	.-98     	; 0x876 <unstuff2>

000008d8 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
     8d8:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
     8da:	00 fb       	bst	r16, 0
    bld     shift, 3    ;1 [30]
     8dc:	23 f9       	bld	r18, 3

000008de <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
     8de:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
     8e0:	81 f2       	breq	.-96     	; 0x882 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
     8e2:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [34]
     8e4:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
     8e6:	10 fb       	bst	r17, 0
    bld     shift, 4    ;1 [36]
     8e8:	24 f9       	bld	r18, 4

000008ea <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
     8ea:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
     8ec:	71 f2       	breq	.-100    	; 0x88a <unstuff4>
    nop2                ;2 [40]
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
     8f0:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [42]
     8f2:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
     8f4:	00 fb       	bst	r16, 0
    bld     shift, 5    ;1 [44]
     8f6:	25 f9       	bld	r18, 5

000008f8 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
     8f8:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
     8fa:	59 f2       	breq	.-106    	; 0x892 <unstuff5>
    nop2                ;2 [48]
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
     8fe:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [50]
     900:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
     902:	10 fb       	bst	r17, 0
    bld     shift, 6    ;1 [52]
     904:	26 f9       	bld	r18, 6

00000906 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
     906:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
     908:	40 f2       	brcs	.-112    	; 0x89a <unstuff6>
    nop2                ;2 [56]
     90a:	00 c0       	rjmp	.+0      	; 0x90c <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
     90c:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [58]
     90e:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
     910:	00 fb       	bst	r16, 0
    bld     shift, 7    ;1 [60]
     912:	27 f9       	bld	r18, 7

00000914 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
     914:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
     916:	28 f6       	brcc	.-118    	; 0x8a2 <rxLoop>

00000918 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
     918:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
     91a:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
     91c:	10 b3       	in	r17, 0x10	; 16
    nop                 ;1 [66]
     91e:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
     920:	f9 cf       	rjmp	.-14     	; 0x914 <didUnstuff7>

00000922 <se0>:


;----------------------------------------------------------------------------
; Processing of received packet (numbers in brackets are cycles after end of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
#define token   x1
se0:                            ;  [0]
    subi    cnt, USB_BUFSIZE    ;1 [1]
     922:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;1 [2]
     924:	31 95       	neg	r19
    cpi     cnt, 3              ;1 [3]
     926:	33 30       	cpi	r19, 0x03	; 3
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;1 [4]
     928:	10 e4       	ldi	r17, 0x40	; 64
    out     USB_INTR_PENDING, x2;1 [5] clear pending intr and check flag later. SE0 should be over.
     92a:	1a bf       	out	0x3a, r17	; 58
    brlo    doReturn            ;1 [6] this is probably an ACK, NAK or similar packet
     92c:	b8 f0       	brcs	.+46     	; 0x95c <doReturn>
    sub     YL, cnt             ;1 [7]
     92e:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;1 [8]
     930:	d0 40       	sbci	r29, 0x00	; 0
    ld      token, y            ;2 [10]
     932:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;1 [11]
     934:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;1 [12]
     936:	41 f1       	breq	.+80     	; 0x988 <handleData>
    cpi     token, USBPID_DATA1 ;1 [13]
     938:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;1 [14]
     93a:	31 f1       	breq	.+76     	; 0x988 <handleData>
    ldd     x2, y+1             ;2 [16] ADDR and 1 bit endpoint number
     93c:	19 81       	ldd	r17, Y+1	; 0x01
    mov     x3, x2              ;1 [17] store for endpoint number
     93e:	41 2f       	mov	r20, r17
    andi    x2, 0x7f            ;1 [18] x2 is now ADDR
     940:	1f 77       	andi	r17, 0x7F	; 127
    lds     shift, usbDeviceAddr;2 [20]
     942:	20 91 90 00 	lds	r18, 0x0090
    cp      x2, shift           ;1 [21]
     946:	12 17       	cp	r17, r18

00000948 <overflow>:
overflow:                       ; This is a hack: brcs overflow will never have Z flag set
    brne    ignorePacket        ;1 [22] packet for different address
     948:	31 f4       	brne	.+12     	; 0x956 <ignorePacket>
    cpi     token, USBPID_IN    ;1 [23]
     94a:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;1 [24]
     94c:	91 f1       	breq	.+100    	; 0x9b2 <handleIn>
    cpi     token, USBPID_SETUP ;1 [25]
     94e:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;1 [26]
     950:	79 f0       	breq	.+30     	; 0x970 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;1 [27]
     952:	01 3e       	cpi	r16, 0xE1	; 225
    breq    handleSetupOrOut    ;1 [28]
     954:	69 f0       	breq	.+26     	; 0x970 <handleSetupOrOut>

00000956 <ignorePacket>:
;   rjmp    ignorePacket        ;fallthrough, should not happen anyway.

ignorePacket:
    clr     shift
     956:	22 27       	eor	r18, r18
    sts     usbCurrentTok, shift
     958:	20 93 97 00 	sts	0x0097, r18

0000095c <doReturn>:
doReturn:
    pop     cnt
     95c:	3f 91       	pop	r19
    pop     x3
     95e:	4f 91       	pop	r20
    pop     x2
     960:	1f 91       	pop	r17
    pop     x1
     962:	0f 91       	pop	r16
    pop     shift
     964:	2f 91       	pop	r18
    pop     YH
     966:	df 91       	pop	r29

00000968 <sofError>:
sofError:
    pop     YL
     968:	cf 91       	pop	r28
    out     SREG, YL
     96a:	cf bf       	out	0x3f, r28	; 63
    pop     YL
     96c:	cf 91       	pop	r28
    reti
     96e:	18 95       	reti

00000970 <handleSetupOrOut>:

#if USB_CFG_HAVE_INTRIN_ENDPOINT && USB_CFG_HAVE_INTRIN_ENDPOINT3
handleIn3:                      ;1 [38] (branch taken)
    lds     cnt, usbTxLen3      ;2 [40]
    sbrc    cnt, 4              ;2 [42]
    rjmp    sendCntAndReti      ;0 43 + 17 = 60 until SOP
    sts     usbTxLen3, x1       ;2 [44] x1 == USBPID_NAK from above
    ldi     YL, lo8(usbTxBuf3)  ;1 [45]
    ldi     YH, hi8(usbTxBuf3)  ;1 [46]
    rjmp    usbSendAndReti      ;2 [48] + 13 = 61 until SOP (violates the spec by 1 cycle)
#endif

;Setup and Out are followed by a data packet two bit times (16 cycles) after
;the end of SE0. The sync code allows up to 40 cycles delay from the start of
;the sync pattern until the first bit is sampled. That's a total of 56 cycles.
handleSetupOrOut:               ;1 [29] (branch taken)
#if USB_CFG_IMPLEMENT_FN_WRITEOUT   /* if we have data for second OUT endpoint, set usbCurrentTok to -1 */
    sbrc    x3, 7               ;1 [30] skip if endpoint 0
    ldi     token, -1           ;1 [31] indicate that this is endpoint 1 OUT
#endif
    sts     usbCurrentTok, token;2 [33]
     970:	00 93 97 00 	sts	0x0097, r16
    pop     cnt                 ;2 [35]
     974:	3f 91       	pop	r19
    pop     x3                  ;2 [37]
     976:	4f 91       	pop	r20
    pop     x2                  ;2 [39]
     978:	1f 91       	pop	r17
    pop     x1                  ;2 [41]
     97a:	0f 91       	pop	r16
    pop     shift               ;2 [43]
     97c:	2f 91       	pop	r18
    pop     YH                  ;2 [45]
     97e:	df 91       	pop	r29
    in      YL, USB_INTR_PENDING;1 [46]
     980:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;1 [47] check whether data is already arriving
     982:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;2 [49] save the pops and pushes -- a new interrupt is aready pending
     984:	46 cf       	rjmp	.-372    	; 0x812 <waitForJ>
    rjmp    sofError            ;2 not an error, but it does the pops and reti we want
     986:	f0 cf       	rjmp	.-32     	; 0x968 <sofError>

00000988 <handleData>:


handleData:                     ;1 [15] (branch taken)
    lds     token, usbCurrentTok;2 [17]
     988:	00 91 97 00 	lds	r16, 0x0097
    tst     token               ;1 [18]
     98c:	00 23       	and	r16, r16
    breq    doReturn            ;1 [19]
     98e:	31 f3       	breq	.-52     	; 0x95c <doReturn>
    lds     x2, usbRxLen        ;2 [21]
     990:	10 91 95 00 	lds	r17, 0x0095
    tst     x2                  ;1 [22]
     994:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;1 [23]
     996:	a1 f5       	brne	.+104    	; 0xa00 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;1 [24] zero sized data packets are status phase only -- ignore and ack
     998:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;1 [25] keep rx buffer clean -- we must not NAK next SETUP
     99a:	a2 f1       	brmi	.+104    	; 0xa04 <sendAckAndReti>
    sts     usbRxLen, cnt       ;2 [27] store received data, swap buffers
     99c:	30 93 95 00 	sts	0x0095, r19
    sts     usbRxToken, token   ;2 [29]
     9a0:	00 93 91 00 	sts	0x0091, r16
    lds     x2, usbInputBufOffset;2 [31] swap buffers
     9a4:	10 91 92 00 	lds	r17, 0x0092
    ldi     cnt, USB_BUFSIZE    ;1 [32]
     9a8:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;1 [33]
     9aa:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;2 [35] buffers now swapped
     9ac:	30 93 92 00 	sts	0x0092, r19
    rjmp    sendAckAndReti      ;2 [37] + 19 = 56 until SOP
     9b0:	29 c0       	rjmp	.+82     	; 0xa04 <sendAckAndReti>

000009b2 <handleIn>:

handleIn:                       ;1 [25] (branch taken)
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;2 [27]
     9b2:	00 91 95 00 	lds	r16, 0x0095
    cpi     x1, 1               ;1 [28] negative values are flow control, 0 means "buffer free"
     9b6:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;1 [29] unprocessed input packet?
     9b8:	1c f5       	brge	.+70     	; 0xa00 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;1 [30] prepare value for usbTxLen
     9ba:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    sbrc    x3, 7               ;2 [33] x3 contains addr + endpoint
     9bc:	47 fd       	sbrc	r20, 7
    rjmp    handleIn1           ;0
     9be:	09 c0       	rjmp	.+18     	; 0x9d2 <handleIn1>
#endif
    lds     cnt, usbTxLen       ;2 [34]
     9c0:	30 91 61 00 	lds	r19, 0x0061
    sbrc    cnt, 4              ;2 [36] all handshake tokens have bit 4 set
     9c4:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;0 37 + 17 = 54 until SOP
     9c6:	20 c0       	rjmp	.+64     	; 0xa08 <sendCntAndReti>
    sts     usbTxLen, x1        ;2 [38] x1 == USBPID_NAK from above
     9c8:	00 93 61 00 	sts	0x0061, r16
    ldi     YL, lo8(usbTxBuf)   ;1 [39]
     9cc:	ca e7       	ldi	r28, 0x7A	; 122
    ldi     YH, hi8(usbTxBuf)   ;1 [40]
     9ce:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;2 [42] + 14 = 56 until SOP
     9d0:	1f c0       	rjmp	.+62     	; 0xa10 <usbSendAndReti>

000009d2 <handleIn1>:

; Comment about when to set usbTxLen to USBPID_NAK:
; We should set it back when we receive the ACK from the host. This would
; be simple to implement: One static variable which stores whether the last
; tx was for endpoint 0 or 1 and a compare in the receiver to distinguish the
; ACK. However, we set it back immediately when we send the package,
; assuming that no error occurs and the host sends an ACK. We save one byte
; RAM this way and avoid potential problems with endless retries. The rest of
; the driver assumes error-free transfers anyway.

#if USB_CFG_HAVE_INTRIN_ENDPOINT    /* placed here due to relative jump range */
handleIn1:                      ;1 [33] (branch taken)
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    ldd     x2, y+2             ;2 [35]
    sbrc    x2, 0               ;2 [37]
    rjmp    handleIn3           ;0
#endif
    lds     cnt, usbTxLen1      ;2 [39]
     9d2:	30 91 62 00 	lds	r19, 0x0062
    sbrc    cnt, 4              ;2 [41] all handshake tokens have bit 4 set
     9d6:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;0 42 + 17 = 59 until SOP
     9d8:	17 c0       	rjmp	.+46     	; 0xa08 <sendCntAndReti>
    sts     usbTxLen1, x1       ;2 [43] x1 == USBPID_NAK from above
     9da:	00 93 62 00 	sts	0x0062, r16
    ldi     YL, lo8(usbTxBuf1)  ;1 [44]
     9de:	c5 e8       	ldi	r28, 0x85	; 133
    ldi     YH, hi8(usbTxBuf1)  ;1 [45]
     9e0:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;2 [47] + 13 = 60 until SOP
     9e2:	16 c0       	rjmp	.+44     	; 0xa10 <usbSendAndReti>

000009e4 <bitstuff0>:
#endif


;----------------------------------------------------------------------------
; Transmitting data
;----------------------------------------------------------------------------

bitstuff0:                  ;1 (for branch taken)
    eor     x1, x4          ;1
     9e4:	05 27       	eor	r16, r21
    ldi     x2, 0           ;1
     9e6:	10 e0       	ldi	r17, 0x00	; 0
    out     USBOUT, x1      ;1 <-- out
     9e8:	02 bb       	out	0x12, r16	; 18
    rjmp    didStuff0       ;2 branch back 2 cycles earlier
     9ea:	1f c0       	rjmp	.+62     	; 0xa2a <didStuff0>

000009ec <bitstuff1>:
bitstuff1:                  ;1 (for branch taken)
    eor     x1, x4          ;1
     9ec:	05 27       	eor	r16, r21
    rjmp    didStuff1       ;2 we know that C is clear, jump back to do OUT and ror 0 into x2
     9ee:	22 c0       	rjmp	.+68     	; 0xa34 <didStuff1>

000009f0 <bitstuff2>:
bitstuff2:                  ;1 (for branch taken)
    eor     x1, x4          ;1
     9f0:	05 27       	eor	r16, r21
    rjmp    didStuff2       ;2 jump back 4 cycles earlier and do out and ror 0 into x2
     9f2:	27 c0       	rjmp	.+78     	; 0xa42 <didStuff2>

000009f4 <bitstuff3>:
bitstuff3:                  ;1 (for branch taken)
    eor     x1, x4          ;1
     9f4:	05 27       	eor	r16, r21
    rjmp    didStuff3       ;2 jump back earlier and ror 0 into x2
     9f6:	2c c0       	rjmp	.+88     	; 0xa50 <didStuff3>

000009f8 <bitstuff4>:
bitstuff4:                  ;1 (for branch taken)
    eor     x1, x4          ;1
     9f8:	05 27       	eor	r16, r21
    ldi     x2, 0           ;1
     9fa:	10 e0       	ldi	r17, 0x00	; 0
    out     USBOUT, x1      ;1 <-- out
     9fc:	02 bb       	out	0x12, r16	; 18
    rjmp    didStuff4       ;2 jump back 2 cycles earlier
     9fe:	33 c0       	rjmp	.+102    	; 0xa66 <didStuff4>

00000a00 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
     a00:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
     a02:	03 c0       	rjmp	.+6      	; 0xa0a <usbSendX3>

00000a04 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
     a04:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
     a06:	01 c0       	rjmp	.+2      	; 0xa0a <usbSendX3>

00000a08 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
     a08:	43 2f       	mov	r20, r19

00000a0a <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
     a0a:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
     a0c:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
     a0e:	32 e0       	ldi	r19, 0x02	; 2

00000a10 <usbSendAndReti>:
;   rjmp    usbSendAndReti      fallthrough

; USB spec says:
; idle = J
; J = (D+ = 0), (D- = 1) or USBOUT = 0x01
; K = (D+ = 1), (D- = 0) or USBOUT = 0x02
; Spec allows 7.5 bit times from EOP to SOP for replies (= 60 cycles)

;usbSend:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x4, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
usbSendAndReti:             ;0 [-13] timing: 13 cycles until SOP
    in      x2, USBDDR      ;1 [-12]
     a10:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK     ;1 [-11]
     a12:	15 60       	ori	r17, 0x05	; 5
    sbi     USBOUT, USBMINUS;2 [-9] prepare idle state; D+ and D- must have been 0 (no pullups)
     a14:	90 9a       	sbi	0x12, 0	; 18
    in      x1, USBOUT      ;1 [-8] port mirror for tx loop
     a16:	02 b3       	in	r16, 0x12	; 18
    out     USBDDR, x2      ;1 [-7] <- acquire bus
     a18:	11 bb       	out	0x11, r17	; 17
; need not init x2 (bitstuff history) because sync starts with 0
    push    x4              ;2 [-5]
     a1a:	5f 93       	push	r21
    ldi     x4, USBMASK     ;1 [-4] exor mask
     a1c:	55 e0       	ldi	r21, 0x05	; 5
    ldi     shift, 0x80     ;1 [-3] sync byte is first byte sent
     a1e:	20 e8       	ldi	r18, 0x80	; 128

00000a20 <txLoop>:
txLoop:                     ;       [62]
    sbrs    shift, 0        ;1 [-2] [62]
     a20:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1 [-1] [63]
     a22:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;1 [0] <-- out bit 0
     a24:	02 bb       	out	0x12, r16	; 18
    ror     shift           ;1 [1]
     a26:	27 95       	ror	r18
    ror     x2              ;1 [2]
     a28:	17 95       	ror	r17

00000a2a <didStuff0>:
didStuff0:
    cpi     x2, 0xfc        ;1 [3]
     a2a:	1c 3f       	cpi	r17, 0xFC	; 252
    brsh    bitstuff0       ;1 [4]
     a2c:	d8 f6       	brcc	.-74     	; 0x9e4 <bitstuff0>
    sbrs    shift, 0        ;1 [5]
     a2e:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1 [6]
     a30:	05 27       	eor	r16, r21
    ror     shift           ;1 [7]
     a32:	27 95       	ror	r18

00000a34 <didStuff1>:
didStuff1:
    out     USBOUT, x1      ;1 [8] <-- out bit 1
     a34:	02 bb       	out	0x12, r16	; 18
    ror     x2              ;1 [9]
     a36:	17 95       	ror	r17
    cpi     x2, 0xfc        ;1 [10]
     a38:	1c 3f       	cpi	r17, 0xFC	; 252
    brsh    bitstuff1       ;1 [11]
     a3a:	c0 f6       	brcc	.-80     	; 0x9ec <bitstuff1>
    sbrs    shift, 0        ;1 [12]
     a3c:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1 [13]
     a3e:	05 27       	eor	r16, r21
    ror     shift           ;1 [14]
     a40:	27 95       	ror	r18

00000a42 <didStuff2>:
didStuff2:
    ror     x2              ;1 [15]
     a42:	17 95       	ror	r17
    out     USBOUT, x1      ;1 [16] <-- out bit 2
     a44:	02 bb       	out	0x12, r16	; 18
    cpi     x2, 0xfc        ;1 [17]
     a46:	1c 3f       	cpi	r17, 0xFC	; 252
    brsh    bitstuff2       ;1 [18]
     a48:	98 f6       	brcc	.-90     	; 0x9f0 <bitstuff2>
    sbrs    shift, 0        ;1 [19]
     a4a:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1 [20]
     a4c:	05 27       	eor	r16, r21
    ror     shift           ;1 [21]
     a4e:	27 95       	ror	r18

00000a50 <didStuff3>:
didStuff3:
    ror     x2              ;1 [22]
     a50:	17 95       	ror	r17
    cpi     x2, 0xfc        ;1 [23]
     a52:	1c 3f       	cpi	r17, 0xFC	; 252
    out     USBOUT, x1      ;1 [24] <-- out bit 3
     a54:	02 bb       	out	0x12, r16	; 18
    brsh    bitstuff3       ;1 [25]
     a56:	70 f6       	brcc	.-100    	; 0x9f4 <bitstuff3>
    nop2                    ;2 [27]
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <didStuff3+0xa>
    ld      x3, y+          ;2 [29]
     a5a:	49 91       	ld	r20, Y+
    sbrs    shift, 0        ;1 [30]
     a5c:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1 [31]
     a5e:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;1 [32] <-- out bit 4
     a60:	02 bb       	out	0x12, r16	; 18
    ror     shift           ;1 [33]
     a62:	27 95       	ror	r18
    ror     x2              ;1 [34]
     a64:	17 95       	ror	r17

00000a66 <didStuff4>:
didStuff4:
    cpi     x2, 0xfc        ;1 [35]
     a66:	1c 3f       	cpi	r17, 0xFC	; 252
    brsh    bitstuff4       ;1 [36]
     a68:	38 f6       	brcc	.-114    	; 0x9f8 <bitstuff4>
    sbrs    shift, 0        ;1 [37]
     a6a:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1 [38]
     a6c:	05 27       	eor	r16, r21
    ror     shift           ;1 [39]
     a6e:	27 95       	ror	r18

00000a70 <didStuff5>:
didStuff5:
    out     USBOUT, x1      ;1 [40] <-- out bit 5
     a70:	02 bb       	out	0x12, r16	; 18
    ror     x2              ;1 [41]
     a72:	17 95       	ror	r17
    cpi     x2, 0xfc        ;1 [42]
     a74:	1c 3f       	cpi	r17, 0xFC	; 252
    brsh    bitstuff5       ;1 [43]
     a76:	38 f5       	brcc	.+78     	; 0xac6 <bitstuff5>
    sbrs    shift, 0        ;1 [44]
     a78:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1 [45]
     a7a:	05 27       	eor	r16, r21
    ror     shift           ;1 [46]
     a7c:	27 95       	ror	r18

00000a7e <didStuff6>:
didStuff6:
    ror     x2              ;1 [47]
     a7e:	17 95       	ror	r17
    out     USBOUT, x1      ;1 [48] <-- out bit 6
     a80:	02 bb       	out	0x12, r16	; 18
    cpi     x2, 0xfc        ;1 [49]
     a82:	1c 3f       	cpi	r17, 0xFC	; 252
    brsh    bitstuff6       ;1 [50]
     a84:	10 f5       	brcc	.+68     	; 0xaca <bitstuff6>
    sbrs    shift, 0        ;1 [51]
     a86:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1 [52]
     a88:	05 27       	eor	r16, r21
    ror     shift           ;1 [53]
     a8a:	27 95       	ror	r18

00000a8c <didStuff7>:
didStuff7:
    ror     x2              ;1 [54]
     a8c:	17 95       	ror	r17
    cpi     x2, 0xfc        ;1 [55]
     a8e:	1c 3f       	cpi	r17, 0xFC	; 252
    out     USBOUT, x1      ;1 [56] <-- out bit 7
     a90:	02 bb       	out	0x12, r16	; 18
    brsh    bitstuff7       ;1 [57]
     a92:	e8 f4       	brcc	.+58     	; 0xace <bitstuff7>
    mov     shift, x3       ;1 [58]
     a94:	24 2f       	mov	r18, r20
    dec     cnt             ;1 [59]
     a96:	3a 95       	dec	r19
    brne    txLoop          ;1/2 [60/61]
     a98:	19 f6       	brne	.-122    	; 0xa20 <txLoop>
;make SE0:
    cbr     x1, USBMASK     ;1 [61] prepare SE0 [spec says EOP may be 15 to 18 cycles]
     a9a:	0a 7f       	andi	r16, 0xFA	; 250
    pop     x4              ;2 [63]
     a9c:	5f 91       	pop	r21
;brackets are cycles from start of SE0 now
    out     USBOUT, x1      ;1 [0] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
     a9e:	02 bb       	out	0x12, r16	; 18
    nop2                    ;2 [2]
     aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <didStuff7+0x16>
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    lds     x2, usbNewDeviceAddr;2 [4]
     aa2:	10 91 96 00 	lds	r17, 0x0096
    subi    YL, 20 + 2      ;1 [5]
     aa6:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;1 [6]
     aa8:	d0 40       	sbci	r29, 0x00	; 0
    breq    skipAddrAssign  ;2 [8]
     aaa:	11 f0       	breq	.+4      	; 0xab0 <skipAddrAssign>
    sts     usbDeviceAddr, x2;0  if not skipped: SE0 is one cycle longer
     aac:	10 93 90 00 	sts	0x0090, r17

00000ab0 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;1 [9] int0 occurred during TX -- clear pending flag
     ab0:	10 e4       	ldi	r17, 0x40	; 64
    out     USB_INTR_PENDING, x2;1 [10]
     ab2:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;1 [11]
     ab4:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR      ;1 [12]
     ab6:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK     ;1 [13] set both pins to input
     ab8:	1a 7f       	andi	r17, 0xFA	; 250
    mov     x3, x1          ;1 [14]
     aba:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;1 [15] configure no pullup on both pins
     abc:	4a 7f       	andi	r20, 0xFA	; 250
    out     USBOUT, x1      ;1 [16] <-- out J (idle) -- end of SE0 (EOP signal)
     abe:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2      ;1 [17] <-- release bus now
     ac0:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3      ;1 [18] <-- ensure no pull-up resistors are active
     ac2:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
     ac4:	4b cf       	rjmp	.-362    	; 0x95c <doReturn>

00000ac6 <bitstuff5>:

bitstuff5:                  ;1 (for branch taken)
    eor     x1, x4          ;1
     ac6:	05 27       	eor	r16, r21
    rjmp    didStuff5       ;2 same trick as above...
     ac8:	d3 cf       	rjmp	.-90     	; 0xa70 <didStuff5>

00000aca <bitstuff6>:
bitstuff6:                  ;1 (for branch taken)
    eor     x1, x4          ;1
     aca:	05 27       	eor	r16, r21
    rjmp    didStuff6       ;2 same trick as above...
     acc:	d8 cf       	rjmp	.-80     	; 0xa7e <didStuff6>

00000ace <bitstuff7>:
bitstuff7:                  ;1 (for branch taken)
    eor     x1, x4          ;1
     ace:	05 27       	eor	r16, r21
    rjmp    didStuff7       ;2 same trick as above...
     ad0:	dd cf       	rjmp	.-70     	; 0xa8c <didStuff7>

00000ad2 <usbCrc16>:


;----------------------------------------------------------------------------
; Utility functions
;----------------------------------------------------------------------------

#ifdef __IAR_SYSTEMS_ASM__
/* Register assignments for usbCrc16 on IAR cc */
/* Calling conventions on IAR:
 * First parameter passed in r16/r17, second in r18/r19 and so on.
 * Callee must preserve r4-r15, r24-r29 (r28/r29 is frame pointer)
 * Result is passed in r16/r17
 * In case of the "tiny" memory model, pointers are only 8 bit with no
 * padding. We therefore pass argument 1 as "16 bit unsigned".
 */
RTMODEL "__rt_version", "3"
/* The line above will generate an error if cc calling conventions change.
 * The value "3" above is valid for IAR 4.10B/W32
 */
#   define argLen   r18 /* argument 2 */
#   define argPtrL  r16 /* argument 1 */
#   define argPtrH  r17 /* argument 1 */

#   define resCrcL  r16 /* result */
#   define resCrcH  r17 /* result */

#   define ptrL     ZL
#   define ptrH     ZH
#   define ptr      Z
#   define byte     r22
#   define bitCnt   r19
#   define polyL    r20
#   define polyH    r21
#   define scratch  r23

#else  /* __IAR_SYSTEMS_ASM__ */ 
/* Register assignments for usbCrc16 on gcc */
/* Calling conventions on gcc:
 * First parameter passed in r24/r25, second in r22/23 and so on.
 * Callee must preserve r1-r17, r28/r29
 * Result is passed in r24/r25
 */
#   define argLen   r22 /* argument 2 */
#   define argPtrL  r24 /* argument 1 */
#   define argPtrH  r25 /* argument 1 */

#   define resCrcL  r24 /* result */
#   define resCrcH  r25 /* result */

#   define ptrL     XL
#   define ptrH     XH
#   define ptr      x
#   define byte     r18
#   define bitCnt   r19
#   define polyL    r20
#   define polyH    r21
#   define scratch  r23

#endif

; extern unsigned usbCrc16(unsigned char *data, unsigned char len);
; data: r24/25
; len: r22
; temp variables:
;   r18: data byte
;   r19: bit counter
;   r20/21: polynomial
;   r23: scratch
;   r24/25: crc-sum
;   r26/27=X: ptr
usbCrc16:
    mov     ptrL, argPtrL
     ad2:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     ad4:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0xff
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
    ldi     resCrcH, 0xff
     ad8:	9f ef       	ldi	r25, 0xFF	; 255
    ldi     polyL, lo8(0xa001)
     ada:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
     adc:	50 ea       	ldi	r21, 0xA0	; 160

00000ade <crcByteLoop>:
crcByteLoop:
    subi    argLen, 1
     ade:	61 50       	subi	r22, 0x01	; 1
    brcs    crcReady
     ae0:	70 f0       	brcs	.+28     	; 0xafe <crcReady>
    ld      byte, ptr+
     ae2:	2d 91       	ld	r18, X+
    ldi     bitCnt, 8
     ae4:	38 e0       	ldi	r19, 0x08	; 8

00000ae6 <crcBitLoop>:
crcBitLoop:
    mov     scratch, byte
     ae6:	72 2f       	mov	r23, r18
    eor     scratch, resCrcL
     ae8:	78 27       	eor	r23, r24
    lsr     resCrcH
     aea:	96 95       	lsr	r25
    ror     resCrcL
     aec:	87 95       	ror	r24
    lsr     byte
     aee:	26 95       	lsr	r18
    sbrs    scratch, 0
     af0:	70 ff       	sbrs	r23, 0
    rjmp    crcNoXor
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <crcNoXor>
    eor     resCrcL, polyL
     af4:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
     af6:	95 27       	eor	r25, r21

00000af8 <crcNoXor>:
crcNoXor:
    dec     bitCnt
     af8:	3a 95       	dec	r19
    brne    crcBitLoop
     afa:	a9 f7       	brne	.-22     	; 0xae6 <crcBitLoop>
    rjmp    crcByteLoop
     afc:	f0 cf       	rjmp	.-32     	; 0xade <crcByteLoop>

00000afe <crcReady>:
crcReady:
    com     resCrcL
     afe:	80 95       	com	r24
    com     resCrcH
     b00:	90 95       	com	r25
    ret
     b02:	08 95       	ret

00000b04 <usbCrc16Append>:

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
     b04:	e6 df       	rcall	.-52     	; 0xad2 <usbCrc16>
    st      ptr+, resCrcL
     b06:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
     b08:	9d 93       	st	X+, r25
    ret
     b0a:	08 95       	ret

00000b0c <vfprintf>:
     b0c:	2f 92       	push	r2
     b0e:	3f 92       	push	r3
     b10:	4f 92       	push	r4
     b12:	5f 92       	push	r5
     b14:	6f 92       	push	r6
     b16:	7f 92       	push	r7
     b18:	8f 92       	push	r8
     b1a:	9f 92       	push	r9
     b1c:	af 92       	push	r10
     b1e:	bf 92       	push	r11
     b20:	cf 92       	push	r12
     b22:	df 92       	push	r13
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	61 97       	sbiw	r28, 0x11	; 17
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
     b40:	1c 01       	movw	r2, r24
     b42:	79 8b       	std	Y+17, r23	; 0x11
     b44:	68 8b       	std	Y+16, r22	; 0x10
     b46:	5a 01       	movw	r10, r20
     b48:	fc 01       	movw	r30, r24
     b4a:	17 82       	std	Z+7, r1	; 0x07
     b4c:	16 82       	std	Z+6, r1	; 0x06
     b4e:	83 81       	ldd	r24, Z+3	; 0x03
     b50:	81 fd       	sbrc	r24, 1
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <vfprintf+0x4e>
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	9f ef       	ldi	r25, 0xFF	; 255
     b58:	66 c1       	rjmp	.+716    	; 0xe26 <vfprintf+0x31a>
     b5a:	44 24       	eor	r4, r4
     b5c:	50 c1       	rjmp	.+672    	; 0xdfe <vfprintf+0x2f2>
     b5e:	24 2d       	mov	r18, r4
     b60:	33 27       	eor	r19, r19
     b62:	20 ff       	sbrs	r18, 0
     b64:	38 c1       	rjmp	.+624    	; 0xdd6 <vfprintf+0x2ca>
     b66:	85 2d       	mov	r24, r5
     b68:	80 53       	subi	r24, 0x30	; 48
     b6a:	8a 30       	cpi	r24, 0x0A	; 10
     b6c:	08 f4       	brcc	.+2      	; 0xb70 <vfprintf+0x64>
     b6e:	42 c1       	rjmp	.+644    	; 0xdf4 <vfprintf+0x2e8>
     b70:	f7 e6       	ldi	r31, 0x67	; 103
     b72:	f5 15       	cp	r31, r5
     b74:	54 f1       	brlt	.+84     	; 0xbca <vfprintf+0xbe>
     b76:	85 e6       	ldi	r24, 0x65	; 101
     b78:	58 16       	cp	r5, r24
     b7a:	0c f0       	brlt	.+2      	; 0xb7e <vfprintf+0x72>
     b7c:	4d c0       	rjmp	.+154    	; 0xc18 <vfprintf+0x10c>
     b7e:	93 e5       	ldi	r25, 0x53	; 83
     b80:	59 16       	cp	r5, r25
     b82:	09 f4       	brne	.+2      	; 0xb86 <vfprintf+0x7a>
     b84:	61 c0       	rjmp	.+194    	; 0xc48 <vfprintf+0x13c>
     b86:	95 15       	cp	r25, r5
     b88:	ac f0       	brlt	.+42     	; 0xbb4 <vfprintf+0xa8>
     b8a:	eb e2       	ldi	r30, 0x2B	; 43
     b8c:	5e 16       	cp	r5, r30
     b8e:	09 f4       	brne	.+2      	; 0xb92 <vfprintf+0x86>
     b90:	31 c1       	rjmp	.+610    	; 0xdf4 <vfprintf+0x2e8>
     b92:	e5 15       	cp	r30, r5
     b94:	4c f0       	brlt	.+18     	; 0xba8 <vfprintf+0x9c>
     b96:	f0 e2       	ldi	r31, 0x20	; 32
     b98:	5f 16       	cp	r5, r31
     b9a:	09 f4       	brne	.+2      	; 0xb9e <vfprintf+0x92>
     b9c:	2b c1       	rjmp	.+598    	; 0xdf4 <vfprintf+0x2e8>
     b9e:	23 e2       	ldi	r18, 0x23	; 35
     ba0:	52 16       	cp	r5, r18
     ba2:	09 f0       	breq	.+2      	; 0xba6 <vfprintf+0x9a>
     ba4:	10 c1       	rjmp	.+544    	; 0xdc6 <vfprintf+0x2ba>
     ba6:	26 c1       	rjmp	.+588    	; 0xdf4 <vfprintf+0x2e8>
     ba8:	85 2d       	mov	r24, r5
     baa:	8d 52       	subi	r24, 0x2D	; 45
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	08 f0       	brcs	.+2      	; 0xbb2 <vfprintf+0xa6>
     bb0:	0a c1       	rjmp	.+532    	; 0xdc6 <vfprintf+0x2ba>
     bb2:	20 c1       	rjmp	.+576    	; 0xdf4 <vfprintf+0x2e8>
     bb4:	83 e6       	ldi	r24, 0x63	; 99
     bb6:	58 16       	cp	r5, r24
     bb8:	91 f1       	breq	.+100    	; 0xc1e <vfprintf+0x112>
     bba:	85 15       	cp	r24, r5
     bbc:	0c f4       	brge	.+2      	; 0xbc0 <vfprintf+0xb4>
     bbe:	4f c0       	rjmp	.+158    	; 0xc5e <vfprintf+0x152>
     bc0:	98 e5       	ldi	r25, 0x58	; 88
     bc2:	59 16       	cp	r5, r25
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <vfprintf+0xbc>
     bc6:	ff c0       	rjmp	.+510    	; 0xdc6 <vfprintf+0x2ba>
     bc8:	21 c0       	rjmp	.+66     	; 0xc0c <vfprintf+0x100>
     bca:	e0 e7       	ldi	r30, 0x70	; 112
     bcc:	5e 16       	cp	r5, r30
     bce:	d1 f0       	breq	.+52     	; 0xc04 <vfprintf+0xf8>
     bd0:	e5 15       	cp	r30, r5
     bd2:	64 f0       	brlt	.+24     	; 0xbec <vfprintf+0xe0>
     bd4:	fc e6       	ldi	r31, 0x6C	; 108
     bd6:	5f 16       	cp	r5, r31
     bd8:	e1 f0       	breq	.+56     	; 0xc12 <vfprintf+0x106>
     bda:	8f e6       	ldi	r24, 0x6F	; 111
     bdc:	58 16       	cp	r5, r24
     bde:	09 f4       	brne	.+2      	; 0xbe2 <vfprintf+0xd6>
     be0:	62 c0       	rjmp	.+196    	; 0xca6 <vfprintf+0x19a>
     be2:	99 e6       	ldi	r25, 0x69	; 105
     be4:	59 16       	cp	r5, r25
     be6:	09 f0       	breq	.+2      	; 0xbea <vfprintf+0xde>
     be8:	ee c0       	rjmp	.+476    	; 0xdc6 <vfprintf+0x2ba>
     bea:	39 c0       	rjmp	.+114    	; 0xc5e <vfprintf+0x152>
     bec:	e5 e7       	ldi	r30, 0x75	; 117
     bee:	5e 16       	cp	r5, r30
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <vfprintf+0xe8>
     bf2:	5b c0       	rjmp	.+182    	; 0xcaa <vfprintf+0x19e>
     bf4:	f8 e7       	ldi	r31, 0x78	; 120
     bf6:	5f 16       	cp	r5, r31
     bf8:	49 f0       	breq	.+18     	; 0xc0c <vfprintf+0x100>
     bfa:	23 e7       	ldi	r18, 0x73	; 115
     bfc:	52 16       	cp	r5, r18
     bfe:	09 f0       	breq	.+2      	; 0xc02 <vfprintf+0xf6>
     c00:	e2 c0       	rjmp	.+452    	; 0xdc6 <vfprintf+0x2ba>
     c02:	14 c0       	rjmp	.+40     	; 0xc2c <vfprintf+0x120>
     c04:	38 e7       	ldi	r19, 0x78	; 120
     c06:	53 2e       	mov	r5, r19
     c08:	80 e1       	ldi	r24, 0x10	; 16
     c0a:	4e c0       	rjmp	.+156    	; 0xca8 <vfprintf+0x19c>
     c0c:	90 e1       	ldi	r25, 0x10	; 16
     c0e:	9f 87       	std	Y+15, r25	; 0x0f
     c10:	4c c0       	rjmp	.+152    	; 0xcaa <vfprintf+0x19e>
     c12:	e4 e0       	ldi	r30, 0x04	; 4
     c14:	4e 2a       	or	r4, r30
     c16:	ee c0       	rjmp	.+476    	; 0xdf4 <vfprintf+0x2e8>
     c18:	9f e3       	ldi	r25, 0x3F	; 63
     c1a:	c9 2e       	mov	r12, r25
     c1c:	91 c0       	rjmp	.+290    	; 0xd40 <vfprintf+0x234>
     c1e:	f5 01       	movw	r30, r10
     c20:	c0 80       	ld	r12, Z
     c22:	22 e0       	ldi	r18, 0x02	; 2
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	a2 0e       	add	r10, r18
     c28:	b3 1e       	adc	r11, r19
     c2a:	8a c0       	rjmp	.+276    	; 0xd40 <vfprintf+0x234>
     c2c:	85 01       	movw	r16, r10
     c2e:	0e 5f       	subi	r16, 0xFE	; 254
     c30:	1f 4f       	sbci	r17, 0xFF	; 255
     c32:	f5 01       	movw	r30, r10
     c34:	c0 80       	ld	r12, Z
     c36:	d1 80       	ldd	r13, Z+1	; 0x01
     c38:	f6 01       	movw	r30, r12
     c3a:	01 90       	ld	r0, Z+
     c3c:	00 20       	and	r0, r0
     c3e:	e9 f7       	brne	.-6      	; 0xc3a <vfprintf+0x12e>
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	ec 19       	sub	r30, r12
     c44:	ef 87       	std	Y+15, r30	; 0x0f
     c46:	ed c0       	rjmp	.+474    	; 0xe22 <vfprintf+0x316>
     c48:	85 01       	movw	r16, r10
     c4a:	0e 5f       	subi	r16, 0xFE	; 254
     c4c:	1f 4f       	sbci	r17, 0xFF	; 255
     c4e:	f5 01       	movw	r30, r10
     c50:	c0 80       	ld	r12, Z
     c52:	d1 80       	ldd	r13, Z+1	; 0x01
     c54:	c6 01       	movw	r24, r12
     c56:	0e 94 2d 09 	call	0x125a	; 0x125a <strlen_P>
     c5a:	8f 87       	std	Y+15, r24	; 0x0f
     c5c:	e2 c0       	rjmp	.+452    	; 0xe22 <vfprintf+0x316>
     c5e:	22 ff       	sbrs	r18, 2
     c60:	08 c0       	rjmp	.+16     	; 0xc72 <vfprintf+0x166>
     c62:	f5 01       	movw	r30, r10
     c64:	80 81       	ld	r24, Z
     c66:	91 81       	ldd	r25, Z+1	; 0x01
     c68:	a2 81       	ldd	r26, Z+2	; 0x02
     c6a:	b3 81       	ldd	r27, Z+3	; 0x03
     c6c:	24 e0       	ldi	r18, 0x04	; 4
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <vfprintf+0x178>
     c72:	f5 01       	movw	r30, r10
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	aa 27       	eor	r26, r26
     c7a:	97 fd       	sbrc	r25, 7
     c7c:	a0 95       	com	r26
     c7e:	ba 2f       	mov	r27, r26
     c80:	22 e0       	ldi	r18, 0x02	; 2
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	a2 0e       	add	r10, r18
     c86:	b3 1e       	adc	r11, r19
     c88:	6c 01       	movw	r12, r24
     c8a:	7d 01       	movw	r14, r26
     c8c:	b7 ff       	sbrs	r27, 7
     c8e:	22 c0       	rjmp	.+68     	; 0xcd4 <vfprintf+0x1c8>
     c90:	32 e0       	ldi	r19, 0x02	; 2
     c92:	43 2a       	or	r4, r19
     c94:	f0 94       	com	r15
     c96:	e0 94       	com	r14
     c98:	d0 94       	com	r13
     c9a:	c0 94       	com	r12
     c9c:	c1 1c       	adc	r12, r1
     c9e:	d1 1c       	adc	r13, r1
     ca0:	e1 1c       	adc	r14, r1
     ca2:	f1 1c       	adc	r15, r1
     ca4:	17 c0       	rjmp	.+46     	; 0xcd4 <vfprintf+0x1c8>
     ca6:	88 e0       	ldi	r24, 0x08	; 8
     ca8:	8f 87       	std	Y+15, r24	; 0x0f
     caa:	22 ff       	sbrs	r18, 2
     cac:	08 c0       	rjmp	.+16     	; 0xcbe <vfprintf+0x1b2>
     cae:	f5 01       	movw	r30, r10
     cb0:	80 81       	ld	r24, Z
     cb2:	91 81       	ldd	r25, Z+1	; 0x01
     cb4:	a2 81       	ldd	r26, Z+2	; 0x02
     cb6:	b3 81       	ldd	r27, Z+3	; 0x03
     cb8:	24 e0       	ldi	r18, 0x04	; 4
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	07 c0       	rjmp	.+14     	; 0xccc <vfprintf+0x1c0>
     cbe:	f5 01       	movw	r30, r10
     cc0:	80 81       	ld	r24, Z
     cc2:	91 81       	ldd	r25, Z+1	; 0x01
     cc4:	aa 27       	eor	r26, r26
     cc6:	bb 27       	eor	r27, r27
     cc8:	22 e0       	ldi	r18, 0x02	; 2
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	a2 0e       	add	r10, r18
     cce:	b3 1e       	adc	r11, r19
     cd0:	6c 01       	movw	r12, r24
     cd2:	7d 01       	movw	r14, r26
     cd4:	87 01       	movw	r16, r14
     cd6:	76 01       	movw	r14, r12
     cd8:	ce 01       	movw	r24, r28
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	9e 87       	std	Y+14, r25	; 0x0e
     cde:	8d 87       	std	Y+13, r24	; 0x0d
     ce0:	9f 85       	ldd	r25, Y+15	; 0x0f
     ce2:	69 2e       	mov	r6, r25
     ce4:	77 24       	eor	r7, r7
     ce6:	88 24       	eor	r8, r8
     ce8:	99 24       	eor	r9, r9
     cea:	c8 01       	movw	r24, r16
     cec:	b7 01       	movw	r22, r14
     cee:	a4 01       	movw	r20, r8
     cf0:	93 01       	movw	r18, r6
     cf2:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__udivmodsi4>
     cf6:	6a 30       	cpi	r22, 0x0A	; 10
     cf8:	1c f0       	brlt	.+6      	; 0xd00 <vfprintf+0x1f4>
     cfa:	65 0d       	add	r22, r5
     cfc:	61 52       	subi	r22, 0x21	; 33
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <vfprintf+0x1f6>
     d00:	60 5d       	subi	r22, 0xD0	; 208
     d02:	ed 85       	ldd	r30, Y+13	; 0x0d
     d04:	fe 85       	ldd	r31, Y+14	; 0x0e
     d06:	61 93       	st	Z+, r22
     d08:	fe 87       	std	Y+14, r31	; 0x0e
     d0a:	ed 87       	std	Y+13, r30	; 0x0d
     d0c:	c8 01       	movw	r24, r16
     d0e:	b7 01       	movw	r22, r14
     d10:	a4 01       	movw	r20, r8
     d12:	93 01       	movw	r18, r6
     d14:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__udivmodsi4>
     d18:	79 01       	movw	r14, r18
     d1a:	8a 01       	movw	r16, r20
     d1c:	21 15       	cp	r18, r1
     d1e:	31 05       	cpc	r19, r1
     d20:	41 05       	cpc	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	11 f7       	brne	.-60     	; 0xcea <vfprintf+0x1de>
     d26:	cc 24       	eor	r12, r12
     d28:	dd 24       	eor	r13, r13
     d2a:	76 01       	movw	r14, r12
     d2c:	41 fe       	sbrs	r4, 1
     d2e:	05 c0       	rjmp	.+10     	; 0xd3a <vfprintf+0x22e>
     d30:	b1 01       	movw	r22, r2
     d32:	8d e2       	ldi	r24, 0x2D	; 45
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 79 09 	call	0x12f2	; 0x12f2 <fputc>
     d3a:	f3 e6       	ldi	r31, 0x63	; 99
     d3c:	5f 16       	cp	r5, r31
     d3e:	31 f4       	brne	.+12     	; 0xd4c <vfprintf+0x240>
     d40:	b1 01       	movw	r22, r2
     d42:	8c 2d       	mov	r24, r12
     d44:	99 27       	eor	r25, r25
     d46:	87 fd       	sbrc	r24, 7
     d48:	90 95       	com	r25
     d4a:	42 c0       	rjmp	.+132    	; 0xdd0 <vfprintf+0x2c4>
     d4c:	23 e7       	ldi	r18, 0x73	; 115
     d4e:	52 16       	cp	r5, r18
     d50:	91 f4       	brne	.+36     	; 0xd76 <vfprintf+0x26a>
     d52:	46 01       	movw	r8, r12
     d54:	1f 85       	ldd	r17, Y+15	; 0x0f
     d56:	09 c0       	rjmp	.+18     	; 0xd6a <vfprintf+0x25e>
     d58:	f4 01       	movw	r30, r8
     d5a:	81 91       	ld	r24, Z+
     d5c:	4f 01       	movw	r8, r30
     d5e:	b1 01       	movw	r22, r2
     d60:	99 27       	eor	r25, r25
     d62:	87 fd       	sbrc	r24, 7
     d64:	90 95       	com	r25
     d66:	0e 94 79 09 	call	0x12f2	; 0x12f2 <fputc>
     d6a:	11 50       	subi	r17, 0x01	; 1
     d6c:	a8 f7       	brcc	.-22     	; 0xd58 <vfprintf+0x24c>
     d6e:	2f ef       	ldi	r18, 0xFF	; 255
     d70:	2f 87       	std	Y+15, r18	; 0x0f
     d72:	44 24       	eor	r4, r4
     d74:	3f c0       	rjmp	.+126    	; 0xdf4 <vfprintf+0x2e8>
     d76:	33 e5       	ldi	r19, 0x53	; 83
     d78:	53 16       	cp	r5, r19
     d7a:	19 f0       	breq	.+6      	; 0xd82 <vfprintf+0x276>
     d7c:	0d 85       	ldd	r16, Y+13	; 0x0d
     d7e:	1e 85       	ldd	r17, Y+14	; 0x0e
     d80:	1a c0       	rjmp	.+52     	; 0xdb6 <vfprintf+0x2aa>
     d82:	86 01       	movw	r16, r12
     d84:	9f 84       	ldd	r9, Y+15	; 0x0f
     d86:	08 c0       	rjmp	.+16     	; 0xd98 <vfprintf+0x28c>
     d88:	f8 01       	movw	r30, r16
     d8a:	84 91       	lpm	r24, Z
     d8c:	b1 01       	movw	r22, r2
     d8e:	99 27       	eor	r25, r25
     d90:	0e 94 79 09 	call	0x12f2	; 0x12f2 <fputc>
     d94:	0f 5f       	subi	r16, 0xFF	; 255
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	9a 94       	dec	r9
     d9a:	ff ef       	ldi	r31, 0xFF	; 255
     d9c:	9f 16       	cp	r9, r31
     d9e:	a1 f7       	brne	.-24     	; 0xd88 <vfprintf+0x27c>
     da0:	ff 87       	std	Y+15, r31	; 0x0f
     da2:	e7 cf       	rjmp	.-50     	; 0xd72 <vfprintf+0x266>
     da4:	f8 01       	movw	r30, r16
     da6:	82 91       	ld	r24, -Z
     da8:	8f 01       	movw	r16, r30
     daa:	b1 01       	movw	r22, r2
     dac:	99 27       	eor	r25, r25
     dae:	87 fd       	sbrc	r24, 7
     db0:	90 95       	com	r25
     db2:	0e 94 79 09 	call	0x12f2	; 0x12f2 <fputc>
     db6:	ce 01       	movw	r24, r28
     db8:	01 96       	adiw	r24, 0x01	; 1
     dba:	08 17       	cp	r16, r24
     dbc:	19 07       	cpc	r17, r25
     dbe:	91 f7       	brne	.-28     	; 0xda4 <vfprintf+0x298>
     dc0:	1e 87       	std	Y+14, r17	; 0x0e
     dc2:	0d 87       	std	Y+13, r16	; 0x0d
     dc4:	d6 cf       	rjmp	.-84     	; 0xd72 <vfprintf+0x266>
     dc6:	b1 01       	movw	r22, r2
     dc8:	85 2d       	mov	r24, r5
     dca:	99 27       	eor	r25, r25
     dcc:	87 fd       	sbrc	r24, 7
     dce:	90 95       	com	r25
     dd0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <fputc>
     dd4:	ce cf       	rjmp	.-100    	; 0xd72 <vfprintf+0x266>
     dd6:	f5 e2       	ldi	r31, 0x25	; 37
     dd8:	5f 16       	cp	r5, r31
     dda:	29 f4       	brne	.+10     	; 0xde6 <vfprintf+0x2da>
     ddc:	2a e0       	ldi	r18, 0x0A	; 10
     dde:	2f 87       	std	Y+15, r18	; 0x0f
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	48 2e       	mov	r4, r24
     de4:	07 c0       	rjmp	.+14     	; 0xdf4 <vfprintf+0x2e8>
     de6:	b1 01       	movw	r22, r2
     de8:	85 2d       	mov	r24, r5
     dea:	99 27       	eor	r25, r25
     dec:	87 fd       	sbrc	r24, 7
     dee:	90 95       	com	r25
     df0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <fputc>
     df4:	88 89       	ldd	r24, Y+16	; 0x10
     df6:	99 89       	ldd	r25, Y+17	; 0x11
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	99 8b       	std	Y+17, r25	; 0x11
     dfc:	88 8b       	std	Y+16, r24	; 0x10
     dfe:	f1 01       	movw	r30, r2
     e00:	83 81       	ldd	r24, Z+3	; 0x03
     e02:	83 ff       	sbrs	r24, 3
     e04:	04 c0       	rjmp	.+8      	; 0xe0e <vfprintf+0x302>
     e06:	e8 89       	ldd	r30, Y+16	; 0x10
     e08:	f9 89       	ldd	r31, Y+17	; 0x11
     e0a:	54 90       	lpm	r5, Z
     e0c:	03 c0       	rjmp	.+6      	; 0xe14 <vfprintf+0x308>
     e0e:	e8 89       	ldd	r30, Y+16	; 0x10
     e10:	f9 89       	ldd	r31, Y+17	; 0x11
     e12:	50 80       	ld	r5, Z
     e14:	55 20       	and	r5, r5
     e16:	09 f0       	breq	.+2      	; 0xe1a <vfprintf+0x30e>
     e18:	a2 ce       	rjmp	.-700    	; 0xb5e <vfprintf+0x52>
     e1a:	f1 01       	movw	r30, r2
     e1c:	86 81       	ldd	r24, Z+6	; 0x06
     e1e:	97 81       	ldd	r25, Z+7	; 0x07
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <vfprintf+0x31a>
     e22:	58 01       	movw	r10, r16
     e24:	93 cf       	rjmp	.-218    	; 0xd4c <vfprintf+0x240>
     e26:	61 96       	adiw	r28, 0x11	; 17
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	cf 90       	pop	r12
     e42:	bf 90       	pop	r11
     e44:	af 90       	pop	r10
     e46:	9f 90       	pop	r9
     e48:	8f 90       	pop	r8
     e4a:	7f 90       	pop	r7
     e4c:	6f 90       	pop	r6
     e4e:	5f 90       	pop	r5
     e50:	4f 90       	pop	r4
     e52:	3f 90       	pop	r3
     e54:	2f 90       	pop	r2
     e56:	08 95       	ret

00000e58 <vfscanf>:
     e58:	2f 92       	push	r2
     e5a:	3f 92       	push	r3
     e5c:	4f 92       	push	r4
     e5e:	5f 92       	push	r5
     e60:	6f 92       	push	r6
     e62:	7f 92       	push	r7
     e64:	8f 92       	push	r8
     e66:	9f 92       	push	r9
     e68:	af 92       	push	r10
     e6a:	bf 92       	push	r11
     e6c:	cf 92       	push	r12
     e6e:	df 92       	push	r13
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	29 97       	sbiw	r28, 0x09	; 9
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	2c 01       	movw	r4, r24
     e8e:	79 87       	std	Y+9, r23	; 0x09
     e90:	68 87       	std	Y+8, r22	; 0x08
     e92:	4a 01       	movw	r8, r20
     e94:	fc 01       	movw	r30, r24
     e96:	17 82       	std	Z+7, r1	; 0x07
     e98:	16 82       	std	Z+6, r1	; 0x06
     e9a:	83 81       	ldd	r24, Z+3	; 0x03
     e9c:	80 fd       	sbrc	r24, 0
     e9e:	05 c0       	rjmp	.+10     	; 0xeaa <vfscanf+0x52>
     ea0:	2f ef       	ldi	r18, 0xFF	; 255
     ea2:	3f ef       	ldi	r19, 0xFF	; 255
     ea4:	3c 83       	std	Y+4, r19	; 0x04
     ea6:	2b 83       	std	Y+3, r18	; 0x03
     ea8:	bd c1       	rjmp	.+890    	; 0x1224 <vfscanf+0x3cc>
     eaa:	1e 82       	std	Y+6, r1	; 0x06
     eac:	1d 82       	std	Y+5, r1	; 0x05
     eae:	8f ef       	ldi	r24, 0xFF	; 255
     eb0:	9f ef       	ldi	r25, 0xFF	; 255
     eb2:	9c 83       	std	Y+4, r25	; 0x04
     eb4:	8b 83       	std	Y+3, r24	; 0x03
     eb6:	66 24       	eor	r6, r6
     eb8:	77 24       	eor	r7, r7
     eba:	1a 82       	std	Y+2, r1	; 0x02
     ebc:	19 82       	std	Y+1, r1	; 0x01
     ebe:	22 24       	eor	r2, r2
     ec0:	85 c1       	rjmp	.+778    	; 0x11cc <vfscanf+0x374>
     ec2:	20 fe       	sbrs	r2, 0
     ec4:	71 c1       	rjmp	.+738    	; 0x11a8 <vfscanf+0x350>
     ec6:	85 32       	cpi	r24, 0x25	; 37
     ec8:	19 f4       	brne	.+6      	; 0xed0 <vfscanf+0x78>
     eca:	9e ef       	ldi	r25, 0xFE	; 254
     ecc:	29 22       	and	r2, r25
     ece:	78 c1       	rjmp	.+752    	; 0x11c0 <vfscanf+0x368>
     ed0:	99 27       	eor	r25, r25
     ed2:	87 fd       	sbrc	r24, 7
     ed4:	90 95       	com	r25
     ed6:	0e 94 12 0a 	call	0x1424	; 0x1424 <tolower>
     eda:	38 2e       	mov	r3, r24
     edc:	ac e6       	ldi	r26, 0x6C	; 108
     ede:	8a 17       	cp	r24, r26
     ee0:	69 f1       	breq	.+90     	; 0xf3c <vfscanf+0xe4>
     ee2:	a8 17       	cp	r26, r24
     ee4:	a4 f0       	brlt	.+40     	; 0xf0e <vfscanf+0xb6>
     ee6:	b4 e6       	ldi	r27, 0x64	; 100
     ee8:	8b 17       	cp	r24, r27
     eea:	09 f4       	brne	.+2      	; 0xeee <vfscanf+0x96>
     eec:	74 c0       	rjmp	.+232    	; 0xfd6 <vfscanf+0x17e>
     eee:	b8 17       	cp	r27, r24
     ef0:	2c f0       	brlt	.+10     	; 0xefc <vfscanf+0xa4>
     ef2:	e3 e6       	ldi	r30, 0x63	; 99
     ef4:	8e 17       	cp	r24, r30
     ef6:	09 f0       	breq	.+2      	; 0xefa <vfscanf+0xa2>
     ef8:	3d c1       	rjmp	.+634    	; 0x1174 <vfscanf+0x31c>
     efa:	23 c0       	rjmp	.+70     	; 0xf42 <vfscanf+0xea>
     efc:	f8 e6       	ldi	r31, 0x68	; 104
     efe:	8f 17       	cp	r24, r31
     f00:	09 f4       	brne	.+2      	; 0xf04 <vfscanf+0xac>
     f02:	5e c1       	rjmp	.+700    	; 0x11c0 <vfscanf+0x368>
     f04:	29 e6       	ldi	r18, 0x69	; 105
     f06:	82 17       	cp	r24, r18
     f08:	09 f0       	breq	.+2      	; 0xf0c <vfscanf+0xb4>
     f0a:	34 c1       	rjmp	.+616    	; 0x1174 <vfscanf+0x31c>
     f0c:	64 c0       	rjmp	.+200    	; 0xfd6 <vfscanf+0x17e>
     f0e:	33 e7       	ldi	r19, 0x73	; 115
     f10:	83 17       	cp	r24, r19
     f12:	51 f1       	breq	.+84     	; 0xf68 <vfscanf+0x110>
     f14:	38 17       	cp	r19, r24
     f16:	4c f0       	brlt	.+18     	; 0xf2a <vfscanf+0xd2>
     f18:	8f e6       	ldi	r24, 0x6F	; 111
     f1a:	38 16       	cp	r3, r24
     f1c:	09 f4       	brne	.+2      	; 0xf20 <vfscanf+0xc8>
     f1e:	52 c0       	rjmp	.+164    	; 0xfc4 <vfscanf+0x16c>
     f20:	90 e7       	ldi	r25, 0x70	; 112
     f22:	39 16       	cp	r3, r25
     f24:	09 f0       	breq	.+2      	; 0xf28 <vfscanf+0xd0>
     f26:	26 c1       	rjmp	.+588    	; 0x1174 <vfscanf+0x31c>
     f28:	52 c0       	rjmp	.+164    	; 0xfce <vfscanf+0x176>
     f2a:	a5 e7       	ldi	r26, 0x75	; 117
     f2c:	8a 17       	cp	r24, r26
     f2e:	09 f4       	brne	.+2      	; 0xf32 <vfscanf+0xda>
     f30:	50 c0       	rjmp	.+160    	; 0xfd2 <vfscanf+0x17a>
     f32:	b8 e7       	ldi	r27, 0x78	; 120
     f34:	8b 17       	cp	r24, r27
     f36:	09 f0       	breq	.+2      	; 0xf3a <vfscanf+0xe2>
     f38:	1d c1       	rjmp	.+570    	; 0x1174 <vfscanf+0x31c>
     f3a:	49 c0       	rjmp	.+146    	; 0xfce <vfscanf+0x176>
     f3c:	e4 e0       	ldi	r30, 0x04	; 4
     f3e:	2e 2a       	or	r2, r30
     f40:	3f c1       	rjmp	.+638    	; 0x11c0 <vfscanf+0x368>
     f42:	d4 01       	movw	r26, r8
     f44:	0d 91       	ld	r16, X+
     f46:	1c 91       	ld	r17, X
     f48:	c2 01       	movw	r24, r4
     f4a:	0e 94 36 09 	call	0x126c	; 0x126c <fgetc>
     f4e:	3c 01       	movw	r6, r24
     f50:	bf ef       	ldi	r27, 0xFF	; 255
     f52:	8f 3f       	cpi	r24, 0xFF	; 255
     f54:	9b 07       	cpc	r25, r27
     f56:	09 f4       	brne	.+2      	; 0xf5a <vfscanf+0x102>
     f58:	49 c1       	rjmp	.+658    	; 0x11ec <vfscanf+0x394>
     f5a:	e2 e0       	ldi	r30, 0x02	; 2
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	8e 0e       	add	r8, r30
     f60:	9f 1e       	adc	r9, r31
     f62:	d8 01       	movw	r26, r16
     f64:	8d 93       	st	X+, r24
     f66:	06 c1       	rjmp	.+524    	; 0x1174 <vfscanf+0x31c>
     f68:	84 01       	movw	r16, r8
     f6a:	0e 5f       	subi	r16, 0xFE	; 254
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	f4 01       	movw	r30, r8
     f70:	e0 80       	ld	r14, Z
     f72:	f1 80       	ldd	r15, Z+1	; 0x01
     f74:	c2 01       	movw	r24, r4
     f76:	0e 94 36 09 	call	0x126c	; 0x126c <fgetc>
     f7a:	3c 01       	movw	r6, r24
     f7c:	0e 94 03 0a 	call	0x1406	; 0x1406 <isspace>
     f80:	89 2b       	or	r24, r25
     f82:	c1 f7       	brne	.-16     	; 0xf74 <vfscanf+0x11c>
     f84:	ff ef       	ldi	r31, 0xFF	; 255
     f86:	6f 16       	cp	r6, r31
     f88:	ff ef       	ldi	r31, 0xFF	; 255
     f8a:	7f 06       	cpc	r7, r31
     f8c:	61 f4       	brne	.+24     	; 0xfa6 <vfscanf+0x14e>
     f8e:	2e c1       	rjmp	.+604    	; 0x11ec <vfscanf+0x394>
     f90:	c3 01       	movw	r24, r6
     f92:	0e 94 03 0a 	call	0x1406	; 0x1406 <isspace>
     f96:	89 2b       	or	r24, r25
     f98:	31 f0       	breq	.+12     	; 0xfa6 <vfscanf+0x14e>
     f9a:	57 01       	movw	r10, r14
     f9c:	b2 01       	movw	r22, r4
     f9e:	c3 01       	movw	r24, r6
     fa0:	0e 94 a6 09 	call	0x134c	; 0x134c <ungetc>
     fa4:	0b c0       	rjmp	.+22     	; 0xfbc <vfscanf+0x164>
     fa6:	d7 01       	movw	r26, r14
     fa8:	6d 92       	st	X+, r6
     faa:	7d 01       	movw	r14, r26
     fac:	c2 01       	movw	r24, r4
     fae:	0e 94 36 09 	call	0x126c	; 0x126c <fgetc>
     fb2:	3c 01       	movw	r6, r24
     fb4:	8f 5f       	subi	r24, 0xFF	; 255
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	59 f7       	brne	.-42     	; 0xf90 <vfscanf+0x138>
     fba:	57 01       	movw	r10, r14
     fbc:	f5 01       	movw	r30, r10
     fbe:	10 82       	st	Z, r1
     fc0:	48 01       	movw	r8, r16
     fc2:	d8 c0       	rjmp	.+432    	; 0x1174 <vfscanf+0x31c>
     fc4:	e2 e0       	ldi	r30, 0x02	; 2
     fc6:	2e 2a       	or	r2, r30
     fc8:	f8 e0       	ldi	r31, 0x08	; 8
     fca:	ff 83       	std	Y+7, r31	; 0x07
     fcc:	04 c0       	rjmp	.+8      	; 0xfd6 <vfscanf+0x17e>
     fce:	20 e1       	ldi	r18, 0x10	; 16
     fd0:	2f 83       	std	Y+7, r18	; 0x07
     fd2:	32 e0       	ldi	r19, 0x02	; 2
     fd4:	23 2a       	or	r2, r19
     fd6:	c2 01       	movw	r24, r4
     fd8:	0e 94 36 09 	call	0x126c	; 0x126c <fgetc>
     fdc:	3c 01       	movw	r6, r24
     fde:	0e 94 03 0a 	call	0x1406	; 0x1406 <isspace>
     fe2:	89 2b       	or	r24, r25
     fe4:	c1 f7       	brne	.-16     	; 0xfd6 <vfscanf+0x17e>
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	68 16       	cp	r6, r24
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	78 06       	cpc	r7, r24
     fee:	09 f4       	brne	.+2      	; 0xff2 <vfscanf+0x19a>
     ff0:	fb c0       	rjmp	.+502    	; 0x11e8 <vfscanf+0x390>
     ff2:	86 2d       	mov	r24, r6
     ff4:	8d 32       	cpi	r24, 0x2D	; 45
     ff6:	19 f0       	breq	.+6      	; 0xffe <vfscanf+0x1a6>
     ff8:	8b 32       	cpi	r24, 0x2B	; 43
     ffa:	59 f4       	brne	.+22     	; 0x1012 <vfscanf+0x1ba>
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <vfscanf+0x1aa>
     ffe:	98 e0       	ldi	r25, 0x08	; 8
    1000:	29 2a       	or	r2, r25
    1002:	c2 01       	movw	r24, r4
    1004:	0e 94 36 09 	call	0x126c	; 0x126c <fgetc>
    1008:	3c 01       	movw	r6, r24
    100a:	8f 5f       	subi	r24, 0xFF	; 255
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	09 f4       	brne	.+2      	; 0x1012 <vfscanf+0x1ba>
    1010:	eb c0       	rjmp	.+470    	; 0x11e8 <vfscanf+0x390>
    1012:	b0 e3       	ldi	r27, 0x30	; 48
    1014:	6b 16       	cp	r6, r27
    1016:	91 f5       	brne	.+100    	; 0x107c <vfscanf+0x224>
    1018:	aa 24       	eor	r10, r10
    101a:	bb 24       	eor	r11, r11
    101c:	65 01       	movw	r12, r10
    101e:	c2 01       	movw	r24, r4
    1020:	0e 94 36 09 	call	0x126c	; 0x126c <fgetc>
    1024:	3c 01       	movw	r6, r24
    1026:	ef ef       	ldi	r30, 0xFF	; 255
    1028:	8f 3f       	cpi	r24, 0xFF	; 255
    102a:	9e 07       	cpc	r25, r30
    102c:	09 f4       	brne	.+2      	; 0x1030 <vfscanf+0x1d8>
    102e:	75 c0       	rjmp	.+234    	; 0x111a <vfscanf+0x2c2>
    1030:	0e 94 12 0a 	call	0x1424	; 0x1424 <tolower>
    1034:	88 37       	cpi	r24, 0x78	; 120
    1036:	e9 f4       	brne	.+58     	; 0x1072 <vfscanf+0x21a>
    1038:	ff e6       	ldi	r31, 0x6F	; 111
    103a:	3f 16       	cp	r3, r31
    103c:	31 f0       	breq	.+12     	; 0x104a <vfscanf+0x1f2>
    103e:	24 e6       	ldi	r18, 0x64	; 100
    1040:	32 16       	cp	r3, r18
    1042:	19 f0       	breq	.+6      	; 0x104a <vfscanf+0x1f2>
    1044:	35 e7       	ldi	r19, 0x75	; 117
    1046:	33 16       	cp	r3, r19
    1048:	29 f4       	brne	.+10     	; 0x1054 <vfscanf+0x1fc>
    104a:	b2 01       	movw	r22, r4
    104c:	c3 01       	movw	r24, r6
    104e:	0e 94 a6 09 	call	0x134c	; 0x134c <ungetc>
    1052:	63 c0       	rjmp	.+198    	; 0x111a <vfscanf+0x2c2>
    1054:	c2 01       	movw	r24, r4
    1056:	0e 94 36 09 	call	0x126c	; 0x126c <fgetc>
    105a:	3c 01       	movw	r6, r24
    105c:	8f ef       	ldi	r24, 0xFF	; 255
    105e:	68 16       	cp	r6, r24
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	78 06       	cpc	r7, r24
    1064:	19 f4       	brne	.+6      	; 0x106c <vfscanf+0x214>
    1066:	90 e1       	ldi	r25, 0x10	; 16
    1068:	9f 83       	std	Y+7, r25	; 0x07
    106a:	57 c0       	rjmp	.+174    	; 0x111a <vfscanf+0x2c2>
    106c:	a0 e1       	ldi	r26, 0x10	; 16
    106e:	af 83       	std	Y+7, r26	; 0x07
    1070:	05 c0       	rjmp	.+10     	; 0x107c <vfscanf+0x224>
    1072:	b9 e6       	ldi	r27, 0x69	; 105
    1074:	3b 16       	cp	r3, r27
    1076:	11 f4       	brne	.+4      	; 0x107c <vfscanf+0x224>
    1078:	e8 e0       	ldi	r30, 0x08	; 8
    107a:	ef 83       	std	Y+7, r30	; 0x07
    107c:	ee 24       	eor	r14, r14
    107e:	ff 24       	eor	r15, r15
    1080:	87 01       	movw	r16, r14
    1082:	c3 01       	movw	r24, r6
    1084:	0e 94 12 0a 	call	0x1424	; 0x1424 <tolower>
    1088:	20 ed       	ldi	r18, 0xD0	; 208
    108a:	c2 2e       	mov	r12, r18
    108c:	2f ef       	ldi	r18, 0xFF	; 255
    108e:	d2 2e       	mov	r13, r18
    1090:	c8 0e       	add	r12, r24
    1092:	d9 1e       	adc	r13, r25
    1094:	fa e0       	ldi	r31, 0x0A	; 10
    1096:	cf 16       	cp	r12, r31
    1098:	d1 04       	cpc	r13, r1
    109a:	3c f0       	brlt	.+14     	; 0x10aa <vfscanf+0x252>
    109c:	c6 01       	movw	r24, r12
    109e:	c1 97       	sbiw	r24, 0x31	; 49
    10a0:	62 f0       	brmi	.+24     	; 0x10ba <vfscanf+0x262>
    10a2:	29 ed       	ldi	r18, 0xD9	; 217
    10a4:	3f ef       	ldi	r19, 0xFF	; 255
    10a6:	c2 0e       	add	r12, r18
    10a8:	d3 1e       	adc	r13, r19
    10aa:	d7 fc       	sbrc	r13, 7
    10ac:	06 c0       	rjmp	.+12     	; 0x10ba <vfscanf+0x262>
    10ae:	3f 81       	ldd	r19, Y+7	; 0x07
    10b0:	83 2f       	mov	r24, r19
    10b2:	99 27       	eor	r25, r25
    10b4:	c8 16       	cp	r12, r24
    10b6:	d9 06       	cpc	r13, r25
    10b8:	3c f0       	brlt	.+14     	; 0x10c8 <vfscanf+0x270>
    10ba:	57 01       	movw	r10, r14
    10bc:	68 01       	movw	r12, r16
    10be:	b2 01       	movw	r22, r4
    10c0:	c3 01       	movw	r24, r6
    10c2:	0e 94 a6 09 	call	0x134c	; 0x134c <ungetc>
    10c6:	20 c0       	rjmp	.+64     	; 0x1108 <vfscanf+0x2b0>
    10c8:	8f 81       	ldd	r24, Y+7	; 0x07
    10ca:	28 2f       	mov	r18, r24
    10cc:	33 27       	eor	r19, r19
    10ce:	44 27       	eor	r20, r20
    10d0:	55 27       	eor	r21, r21
    10d2:	c8 01       	movw	r24, r16
    10d4:	b7 01       	movw	r22, r14
    10d6:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsi3>
    10da:	7b 01       	movw	r14, r22
    10dc:	8c 01       	movw	r16, r24
    10de:	c6 01       	movw	r24, r12
    10e0:	aa 27       	eor	r26, r26
    10e2:	97 fd       	sbrc	r25, 7
    10e4:	a0 95       	com	r26
    10e6:	ba 2f       	mov	r27, r26
    10e8:	e8 0e       	add	r14, r24
    10ea:	f9 1e       	adc	r15, r25
    10ec:	0a 1f       	adc	r16, r26
    10ee:	1b 1f       	adc	r17, r27
    10f0:	c2 01       	movw	r24, r4
    10f2:	0e 94 36 09 	call	0x126c	; 0x126c <fgetc>
    10f6:	3c 01       	movw	r6, r24
    10f8:	9f ef       	ldi	r25, 0xFF	; 255
    10fa:	69 16       	cp	r6, r25
    10fc:	9f ef       	ldi	r25, 0xFF	; 255
    10fe:	79 06       	cpc	r7, r25
    1100:	09 f0       	breq	.+2      	; 0x1104 <vfscanf+0x2ac>
    1102:	bf cf       	rjmp	.-130    	; 0x1082 <vfscanf+0x22a>
    1104:	57 01       	movw	r10, r14
    1106:	68 01       	movw	r12, r16
    1108:	23 fe       	sbrs	r2, 3
    110a:	07 c0       	rjmp	.+14     	; 0x111a <vfscanf+0x2c2>
    110c:	aa 24       	eor	r10, r10
    110e:	bb 24       	eor	r11, r11
    1110:	65 01       	movw	r12, r10
    1112:	ae 18       	sub	r10, r14
    1114:	bf 08       	sbc	r11, r15
    1116:	c0 0a       	sbc	r12, r16
    1118:	d1 0a       	sbc	r13, r17
    111a:	22 2d       	mov	r18, r2
    111c:	33 27       	eor	r19, r19
    111e:	c9 01       	movw	r24, r18
    1120:	86 70       	andi	r24, 0x06	; 6
    1122:	90 70       	andi	r25, 0x00	; 0
    1124:	06 97       	sbiw	r24, 0x06	; 6
    1126:	41 f4       	brne	.+16     	; 0x1138 <vfscanf+0x2e0>
    1128:	d4 01       	movw	r26, r8
    112a:	ed 91       	ld	r30, X+
    112c:	fc 91       	ld	r31, X
    112e:	a0 82       	st	Z, r10
    1130:	b1 82       	std	Z+1, r11	; 0x01
    1132:	c2 82       	std	Z+2, r12	; 0x02
    1134:	d3 82       	std	Z+3, r13	; 0x03
    1136:	07 c0       	rjmp	.+14     	; 0x1146 <vfscanf+0x2ee>
    1138:	21 ff       	sbrs	r18, 1
    113a:	0a c0       	rjmp	.+20     	; 0x1150 <vfscanf+0x2f8>
    113c:	d4 01       	movw	r26, r8
    113e:	ed 91       	ld	r30, X+
    1140:	fc 91       	ld	r31, X
    1142:	b1 82       	std	Z+1, r11	; 0x01
    1144:	a0 82       	st	Z, r10
    1146:	e2 e0       	ldi	r30, 0x02	; 2
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	8e 0e       	add	r8, r30
    114c:	9f 1e       	adc	r9, r31
    114e:	12 c0       	rjmp	.+36     	; 0x1174 <vfscanf+0x31c>
    1150:	c4 01       	movw	r24, r8
    1152:	02 96       	adiw	r24, 0x02	; 2
    1154:	22 ff       	sbrs	r18, 2
    1156:	08 c0       	rjmp	.+16     	; 0x1168 <vfscanf+0x310>
    1158:	d4 01       	movw	r26, r8
    115a:	ed 91       	ld	r30, X+
    115c:	fc 91       	ld	r31, X
    115e:	a0 82       	st	Z, r10
    1160:	b1 82       	std	Z+1, r11	; 0x01
    1162:	c2 82       	std	Z+2, r12	; 0x02
    1164:	d3 82       	std	Z+3, r13	; 0x03
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <vfscanf+0x31a>
    1168:	d4 01       	movw	r26, r8
    116a:	ed 91       	ld	r30, X+
    116c:	fc 91       	ld	r31, X
    116e:	b1 82       	std	Z+1, r11	; 0x01
    1170:	a0 82       	st	Z, r10
    1172:	4c 01       	movw	r8, r24
    1174:	f2 01       	movw	r30, r4
    1176:	86 81       	ldd	r24, Z+6	; 0x06
    1178:	97 81       	ldd	r25, Z+7	; 0x07
    117a:	29 81       	ldd	r18, Y+1	; 0x01
    117c:	3a 81       	ldd	r19, Y+2	; 0x02
    117e:	28 17       	cp	r18, r24
    1180:	39 07       	cpc	r19, r25
    1182:	44 f4       	brge	.+16     	; 0x1194 <vfscanf+0x33c>
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
    118e:	1c 82       	std	Y+4, r1	; 0x04
    1190:	1b 82       	std	Y+3, r1	; 0x03
    1192:	08 c0       	rjmp	.+16     	; 0x11a4 <vfscanf+0x34c>
    1194:	9e e6       	ldi	r25, 0x6E	; 110
    1196:	39 16       	cp	r3, r25
    1198:	39 f5       	brne	.+78     	; 0x11e8 <vfscanf+0x390>
    119a:	af ef       	ldi	r26, 0xFF	; 255
    119c:	6a 16       	cp	r6, r26
    119e:	af ef       	ldi	r26, 0xFF	; 255
    11a0:	7a 06       	cpc	r7, r26
    11a2:	11 f1       	breq	.+68     	; 0x11e8 <vfscanf+0x390>
    11a4:	22 24       	eor	r2, r2
    11a6:	0c c0       	rjmp	.+24     	; 0x11c0 <vfscanf+0x368>
    11a8:	85 32       	cpi	r24, 0x25	; 37
    11aa:	51 f4       	brne	.+20     	; 0x11c0 <vfscanf+0x368>
    11ac:	f2 01       	movw	r30, r4
    11ae:	06 80       	ldd	r0, Z+6	; 0x06
    11b0:	f7 81       	ldd	r31, Z+7	; 0x07
    11b2:	e0 2d       	mov	r30, r0
    11b4:	fa 83       	std	Y+2, r31	; 0x02
    11b6:	e9 83       	std	Y+1, r30	; 0x01
    11b8:	fa e0       	ldi	r31, 0x0A	; 10
    11ba:	ff 83       	std	Y+7, r31	; 0x07
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	28 2e       	mov	r2, r24
    11c0:	28 85       	ldd	r18, Y+8	; 0x08
    11c2:	39 85       	ldd	r19, Y+9	; 0x09
    11c4:	2f 5f       	subi	r18, 0xFF	; 255
    11c6:	3f 4f       	sbci	r19, 0xFF	; 255
    11c8:	39 87       	std	Y+9, r19	; 0x09
    11ca:	28 87       	std	Y+8, r18	; 0x08
    11cc:	f2 01       	movw	r30, r4
    11ce:	83 81       	ldd	r24, Z+3	; 0x03
    11d0:	83 ff       	sbrs	r24, 3
    11d2:	04 c0       	rjmp	.+8      	; 0x11dc <vfscanf+0x384>
    11d4:	e8 85       	ldd	r30, Y+8	; 0x08
    11d6:	f9 85       	ldd	r31, Y+9	; 0x09
    11d8:	84 91       	lpm	r24, Z
    11da:	03 c0       	rjmp	.+6      	; 0x11e2 <vfscanf+0x38a>
    11dc:	a8 85       	ldd	r26, Y+8	; 0x08
    11de:	b9 85       	ldd	r27, Y+9	; 0x09
    11e0:	8c 91       	ld	r24, X
    11e2:	88 23       	and	r24, r24
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <vfscanf+0x390>
    11e6:	6d ce       	rjmp	.-806    	; 0xec2 <vfscanf+0x6a>
    11e8:	20 fe       	sbrs	r2, 0
    11ea:	0f c0       	rjmp	.+30     	; 0x120a <vfscanf+0x3b2>
    11ec:	f2 01       	movw	r30, r4
    11ee:	86 81       	ldd	r24, Z+6	; 0x06
    11f0:	97 81       	ldd	r25, Z+7	; 0x07
    11f2:	29 81       	ldd	r18, Y+1	; 0x01
    11f4:	3a 81       	ldd	r19, Y+2	; 0x02
    11f6:	28 17       	cp	r18, r24
    11f8:	39 07       	cpc	r19, r25
    11fa:	3c f4       	brge	.+14     	; 0x120a <vfscanf+0x3b2>
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	9e 83       	std	Y+6, r25	; 0x06
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	1c 82       	std	Y+4, r1	; 0x04
    1208:	1b 82       	std	Y+3, r1	; 0x03
    120a:	9f ef       	ldi	r25, 0xFF	; 255
    120c:	69 16       	cp	r6, r25
    120e:	9f ef       	ldi	r25, 0xFF	; 255
    1210:	79 06       	cpc	r7, r25
    1212:	21 f4       	brne	.+8      	; 0x121c <vfscanf+0x3c4>
    1214:	ad 81       	ldd	r26, Y+5	; 0x05
    1216:	be 81       	ldd	r27, Y+6	; 0x06
    1218:	ab 2b       	or	r26, r27
    121a:	21 f0       	breq	.+8      	; 0x1224 <vfscanf+0x3cc>
    121c:	ed 81       	ldd	r30, Y+5	; 0x05
    121e:	fe 81       	ldd	r31, Y+6	; 0x06
    1220:	fc 83       	std	Y+4, r31	; 0x04
    1222:	eb 83       	std	Y+3, r30	; 0x03
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	9c 81       	ldd	r25, Y+4	; 0x04
    1228:	29 96       	adiw	r28, 0x09	; 9
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	ff 90       	pop	r15
    123e:	ef 90       	pop	r14
    1240:	df 90       	pop	r13
    1242:	cf 90       	pop	r12
    1244:	bf 90       	pop	r11
    1246:	af 90       	pop	r10
    1248:	9f 90       	pop	r9
    124a:	8f 90       	pop	r8
    124c:	7f 90       	pop	r7
    124e:	6f 90       	pop	r6
    1250:	5f 90       	pop	r5
    1252:	4f 90       	pop	r4
    1254:	3f 90       	pop	r3
    1256:	2f 90       	pop	r2
    1258:	08 95       	ret

0000125a <strlen_P>:
    125a:	fc 01       	movw	r30, r24
    125c:	05 90       	lpm	r0, Z+
    125e:	00 20       	and	r0, r0
    1260:	e9 f7       	brne	.-6      	; 0x125c <strlen_P+0x2>
    1262:	80 95       	com	r24
    1264:	90 95       	com	r25
    1266:	8e 0f       	add	r24, r30
    1268:	9f 1f       	adc	r25, r31
    126a:	08 95       	ret

0000126c <fgetc>:
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	ec 01       	movw	r28, r24
    1272:	2b 81       	ldd	r18, Y+3	; 0x03
    1274:	82 2f       	mov	r24, r18
    1276:	99 27       	eor	r25, r25
    1278:	80 ff       	sbrs	r24, 0
    127a:	15 c0       	rjmp	.+42     	; 0x12a6 <fgetc+0x3a>
    127c:	86 ff       	sbrs	r24, 6
    127e:	0a c0       	rjmp	.+20     	; 0x1294 <fgetc+0x28>
    1280:	2f 7b       	andi	r18, 0xBF	; 191
    1282:	2b 83       	std	Y+3, r18	; 0x03
    1284:	8e 81       	ldd	r24, Y+6	; 0x06
    1286:	9f 81       	ldd	r25, Y+7	; 0x07
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	9f 83       	std	Y+7, r25	; 0x07
    128c:	8e 83       	std	Y+6, r24	; 0x06
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	99 27       	eor	r25, r25
    1292:	2c c0       	rjmp	.+88     	; 0x12ec <fgetc+0x80>
    1294:	82 ff       	sbrs	r24, 2
    1296:	12 c0       	rjmp	.+36     	; 0x12bc <fgetc+0x50>
    1298:	e8 81       	ld	r30, Y
    129a:	f9 81       	ldd	r31, Y+1	; 0x01
    129c:	80 81       	ld	r24, Z
    129e:	88 23       	and	r24, r24
    12a0:	29 f4       	brne	.+10     	; 0x12ac <fgetc+0x40>
    12a2:	20 62       	ori	r18, 0x20	; 32
    12a4:	2b 83       	std	Y+3, r18	; 0x03
    12a6:	8f ef       	ldi	r24, 0xFF	; 255
    12a8:	9f ef       	ldi	r25, 0xFF	; 255
    12aa:	20 c0       	rjmp	.+64     	; 0x12ec <fgetc+0x80>
    12ac:	28 2f       	mov	r18, r24
    12ae:	33 27       	eor	r19, r19
    12b0:	27 fd       	sbrc	r18, 7
    12b2:	30 95       	com	r19
    12b4:	31 96       	adiw	r30, 0x01	; 1
    12b6:	f9 83       	std	Y+1, r31	; 0x01
    12b8:	e8 83       	st	Y, r30
    12ba:	11 c0       	rjmp	.+34     	; 0x12de <fgetc+0x72>
    12bc:	ea 85       	ldd	r30, Y+10	; 0x0a
    12be:	fb 85       	ldd	r31, Y+11	; 0x0b
    12c0:	ce 01       	movw	r24, r28
    12c2:	09 95       	icall
    12c4:	9c 01       	movw	r18, r24
    12c6:	97 ff       	sbrs	r25, 7
    12c8:	0a c0       	rjmp	.+20     	; 0x12de <fgetc+0x72>
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	2f 5f       	subi	r18, 0xFF	; 255
    12ce:	3f 4f       	sbci	r19, 0xFF	; 255
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <fgetc+0x6a>
    12d2:	90 e1       	ldi	r25, 0x10	; 16
    12d4:	01 c0       	rjmp	.+2      	; 0x12d8 <fgetc+0x6c>
    12d6:	90 e2       	ldi	r25, 0x20	; 32
    12d8:	89 2b       	or	r24, r25
    12da:	8b 83       	std	Y+3, r24	; 0x03
    12dc:	e4 cf       	rjmp	.-56     	; 0x12a6 <fgetc+0x3a>
    12de:	8e 81       	ldd	r24, Y+6	; 0x06
    12e0:	9f 81       	ldd	r25, Y+7	; 0x07
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	9f 83       	std	Y+7, r25	; 0x07
    12e6:	8e 83       	std	Y+6, r24	; 0x06
    12e8:	82 2f       	mov	r24, r18
    12ea:	99 27       	eor	r25, r25
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	08 95       	ret

000012f2 <fputc>:
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	8c 01       	movw	r16, r24
    12fc:	eb 01       	movw	r28, r22
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	99 27       	eor	r25, r25
    1302:	81 ff       	sbrs	r24, 1
    1304:	1b c0       	rjmp	.+54     	; 0x133c <fputc+0x4a>
    1306:	82 ff       	sbrs	r24, 2
    1308:	0d c0       	rjmp	.+26     	; 0x1324 <fputc+0x32>
    130a:	2e 81       	ldd	r18, Y+6	; 0x06
    130c:	3f 81       	ldd	r19, Y+7	; 0x07
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	9d 81       	ldd	r25, Y+5	; 0x05
    1312:	28 17       	cp	r18, r24
    1314:	39 07       	cpc	r19, r25
    1316:	64 f4       	brge	.+24     	; 0x1330 <fputc+0x3e>
    1318:	e8 81       	ld	r30, Y
    131a:	f9 81       	ldd	r31, Y+1	; 0x01
    131c:	01 93       	st	Z+, r16
    131e:	f9 83       	std	Y+1, r31	; 0x01
    1320:	e8 83       	st	Y, r30
    1322:	06 c0       	rjmp	.+12     	; 0x1330 <fputc+0x3e>
    1324:	e8 85       	ldd	r30, Y+8	; 0x08
    1326:	f9 85       	ldd	r31, Y+9	; 0x09
    1328:	80 2f       	mov	r24, r16
    132a:	09 95       	icall
    132c:	89 2b       	or	r24, r25
    132e:	31 f4       	brne	.+12     	; 0x133c <fputc+0x4a>
    1330:	8e 81       	ldd	r24, Y+6	; 0x06
    1332:	9f 81       	ldd	r25, Y+7	; 0x07
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	9f 83       	std	Y+7, r25	; 0x07
    1338:	8e 83       	std	Y+6, r24	; 0x06
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <fputc+0x4e>
    133c:	0f ef       	ldi	r16, 0xFF	; 255
    133e:	1f ef       	ldi	r17, 0xFF	; 255
    1340:	c8 01       	movw	r24, r16
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	08 95       	ret

0000134c <ungetc>:
    134c:	ac 01       	movw	r20, r24
    134e:	fb 01       	movw	r30, r22
    1350:	23 81       	ldd	r18, Z+3	; 0x03
    1352:	82 2f       	mov	r24, r18
    1354:	99 27       	eor	r25, r25
    1356:	80 ff       	sbrs	r24, 0
    1358:	12 c0       	rjmp	.+36     	; 0x137e <ungetc+0x32>
    135a:	86 fd       	sbrc	r24, 6
    135c:	10 c0       	rjmp	.+32     	; 0x137e <ungetc+0x32>
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	4f 3f       	cpi	r20, 0xFF	; 255
    1362:	58 07       	cpc	r21, r24
    1364:	61 f0       	breq	.+24     	; 0x137e <ungetc+0x32>
    1366:	42 83       	std	Z+2, r20	; 0x02
    1368:	20 64       	ori	r18, 0x40	; 64
    136a:	2f 7d       	andi	r18, 0xDF	; 223
    136c:	23 83       	std	Z+3, r18	; 0x03
    136e:	86 81       	ldd	r24, Z+6	; 0x06
    1370:	97 81       	ldd	r25, Z+7	; 0x07
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	97 83       	std	Z+7, r25	; 0x07
    1376:	86 83       	std	Z+6, r24	; 0x06
    1378:	84 2f       	mov	r24, r20
    137a:	99 27       	eor	r25, r25
    137c:	08 95       	ret
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	9f ef       	ldi	r25, 0xFF	; 255
    1382:	08 95       	ret

00001384 <__mulsi3>:
    1384:	62 9f       	mul	r22, r18
    1386:	d0 01       	movw	r26, r0
    1388:	73 9f       	mul	r23, r19
    138a:	f0 01       	movw	r30, r0
    138c:	82 9f       	mul	r24, r18
    138e:	e0 0d       	add	r30, r0
    1390:	f1 1d       	adc	r31, r1
    1392:	64 9f       	mul	r22, r20
    1394:	e0 0d       	add	r30, r0
    1396:	f1 1d       	adc	r31, r1
    1398:	92 9f       	mul	r25, r18
    139a:	f0 0d       	add	r31, r0
    139c:	83 9f       	mul	r24, r19
    139e:	f0 0d       	add	r31, r0
    13a0:	74 9f       	mul	r23, r20
    13a2:	f0 0d       	add	r31, r0
    13a4:	65 9f       	mul	r22, r21
    13a6:	f0 0d       	add	r31, r0
    13a8:	99 27       	eor	r25, r25
    13aa:	72 9f       	mul	r23, r18
    13ac:	b0 0d       	add	r27, r0
    13ae:	e1 1d       	adc	r30, r1
    13b0:	f9 1f       	adc	r31, r25
    13b2:	63 9f       	mul	r22, r19
    13b4:	b0 0d       	add	r27, r0
    13b6:	e1 1d       	adc	r30, r1
    13b8:	f9 1f       	adc	r31, r25
    13ba:	bd 01       	movw	r22, r26
    13bc:	cf 01       	movw	r24, r30
    13be:	11 24       	eor	r1, r1
    13c0:	08 95       	ret

000013c2 <__udivmodsi4>:
    13c2:	a1 e2       	ldi	r26, 0x21	; 33
    13c4:	1a 2e       	mov	r1, r26
    13c6:	aa 1b       	sub	r26, r26
    13c8:	bb 1b       	sub	r27, r27
    13ca:	fd 01       	movw	r30, r26
    13cc:	0d c0       	rjmp	.+26     	; 0x13e8 <__udivmodsi4_ep>

000013ce <__udivmodsi4_loop>:
    13ce:	aa 1f       	adc	r26, r26
    13d0:	bb 1f       	adc	r27, r27
    13d2:	ee 1f       	adc	r30, r30
    13d4:	ff 1f       	adc	r31, r31
    13d6:	a2 17       	cp	r26, r18
    13d8:	b3 07       	cpc	r27, r19
    13da:	e4 07       	cpc	r30, r20
    13dc:	f5 07       	cpc	r31, r21
    13de:	20 f0       	brcs	.+8      	; 0x13e8 <__udivmodsi4_ep>
    13e0:	a2 1b       	sub	r26, r18
    13e2:	b3 0b       	sbc	r27, r19
    13e4:	e4 0b       	sbc	r30, r20
    13e6:	f5 0b       	sbc	r31, r21

000013e8 <__udivmodsi4_ep>:
    13e8:	66 1f       	adc	r22, r22
    13ea:	77 1f       	adc	r23, r23
    13ec:	88 1f       	adc	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	1a 94       	dec	r1
    13f2:	69 f7       	brne	.-38     	; 0x13ce <__udivmodsi4_loop>
    13f4:	60 95       	com	r22
    13f6:	70 95       	com	r23
    13f8:	80 95       	com	r24
    13fa:	90 95       	com	r25
    13fc:	9b 01       	movw	r18, r22
    13fe:	ac 01       	movw	r20, r24
    1400:	bd 01       	movw	r22, r26
    1402:	cf 01       	movw	r24, r30
    1404:	08 95       	ret

00001406 <isspace>:
    1406:	91 11       	cpse	r25, r1
    1408:	13 c0       	rjmp	.+38     	; 0x1430 <__ctype_isfalse>
    140a:	80 32       	cpi	r24, 0x20	; 32
    140c:	51 f0       	breq	.+20     	; 0x1422 <isspace+0x1c>
    140e:	8a 30       	cpi	r24, 0x0A	; 10
    1410:	41 f0       	breq	.+16     	; 0x1422 <isspace+0x1c>
    1412:	8c 30       	cpi	r24, 0x0C	; 12
    1414:	31 f0       	breq	.+12     	; 0x1422 <isspace+0x1c>
    1416:	8d 30       	cpi	r24, 0x0D	; 13
    1418:	21 f0       	breq	.+8      	; 0x1422 <isspace+0x1c>
    141a:	89 30       	cpi	r24, 0x09	; 9
    141c:	11 f0       	breq	.+4      	; 0x1422 <isspace+0x1c>
    141e:	8b 30       	cpi	r24, 0x0B	; 11
    1420:	99 f7       	brne	.-26     	; 0x1408 <isspace+0x2>
    1422:	08 95       	ret

00001424 <tolower>:
    1424:	8f 93       	push	r24
    1426:	09 d0       	rcall	.+18     	; 0x143a <isalpha>
    1428:	8f 91       	pop	r24
    142a:	09 f0       	breq	.+2      	; 0x142e <tolower+0xa>
    142c:	80 62       	ori	r24, 0x20	; 32
    142e:	08 95       	ret

00001430 <__ctype_isfalse>:
    1430:	99 27       	eor	r25, r25
    1432:	88 27       	eor	r24, r24

00001434 <__ctype_istrue>:
    1434:	08 95       	ret

00001436 <isupper>:
    1436:	85 fd       	sbrc	r24, 5
    1438:	fb cf       	rjmp	.-10     	; 0x1430 <__ctype_isfalse>

0000143a <isalpha>:
    143a:	80 62       	ori	r24, 0x20	; 32

0000143c <islower>:
    143c:	91 11       	cpse	r25, r1
    143e:	f8 cf       	rjmp	.-16     	; 0x1430 <__ctype_isfalse>
    1440:	81 36       	cpi	r24, 0x61	; 97
    1442:	ec f3       	brlt	.-6      	; 0x143e <islower+0x2>
    1444:	8b 37       	cpi	r24, 0x7B	; 123
    1446:	dc f7       	brge	.-10     	; 0x143e <islower+0x2>
    1448:	08 95       	ret

0000144a <_exit>:
    144a:	ff cf       	rjmp	.-2      	; 0x144a <_exit>
